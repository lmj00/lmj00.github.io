[
  
    {
      "title"    : "SSL/TLS",
      "category" : "",
      "tags"     : "",
      "url"      : "/cs/SSL-TLS",
      "date"     : "2025-09-15 00:00:00 +0000",
      "content"  : "기존의 c 으로 구성된 oms 테스트 프로그램을 파이썬으로 마이그레이션 하는 중에ssl tls 암호화 규약 불일치 connectionreseterror 문제를 알게되어 기록한다 ssl secure sockets layer 암호화 기반 인터넷 보안 프로토콜입니다 인터넷 통신의 개인정보 보호 인증 데이터 무결성을 보장하기 위해 netscape가 1995년 처음으로 개발했습니다 ssl은 현재 사용 중인 tls 암호화의 전신입니다 ssl 작동 방식소켓 생성import socketimport sslimport certifihostname www python org with socket create connection hostname 443 as sock tcp 연결 context ssl create default context cafile certifi where ssl 컨텍스트 생성 with context wrap socket sock server hostname hostname as ssock ssl 핸드셰이크 print f tls 버전 ssock version tlsv1 3 print f 암호화 방식 ssock cipher tls aes 128 gcm sha256 tlsv1 3 128 ssl 컨텍스트의 기능 인증서 검증 설정 신뢰할 수 있는 ca 선택 tls 사용 ssl 2 0 3 0 차단 암호화 정책ssl과 tls transport layer security ssl은 tls의 직접적인 전신입니다 1999년 인터넷 엔지니어링 태스크 포스 ietf 는 ssl에 대한 업데이트를 제안했다 이 업데이트는 넷스케이프의 개입 없이 ietf에 의해 개발되었기 때문에 이름은 tls로 변경되었다 ssl 3 0 의 마지막 버전과 tls의 첫 번째 버전 사이의 변화는 중요하지 않았다 이름 변경은 주로 새로운 소유권을 의미했습니다 ssl과 tls는 매우 유사하기 때문에 사람들은 종종 용어를 같은 의미로 사용합니다 일부는 여전히 ssl이라고 부르는 반면 ssl은 여전히 널리 인식되기 때문에 ssl tls 암호화 를 사용합니다 connectionreseterror 원인api 서버는 오래된 ssl tls 버전 tls 1 0 1 1 만 지원했었는데 python의 기본 프로토콜은 보안 강화를 위해 최신 버전 tls 1 2 1 3 만 허용해서프로토콜 협상 실패로 connectionreseterror가 발생했다 해결방법 python에서 구형 서버와 호환되는 ssl 컨텍스트 생성context ssl sslcontext ssl protocol tls client 인증서 검증 비활성화context check hostname falsecontext verify mode ssl cert none 구형 서버와 호환성을 위해 보안 수준 낮춤context set ciphers default seclevel 1 seclevel 1 낮은 보안 수준 ssl 컨텍스트 적용http urllib3 poolmanager ssl context context response http request get full url cryptography파이썬 코드로 ssl tls를 구현하기 위해 필요한 파이썬 라이브러리다"
      } ,
  
    {
      "title"    : "Cursor AI",
      "category" : "",
      "tags"     : "",
      "url"      : "/Cursor-ai",
      "date"     : "2025-06-12 00:00:00 +0000",
      "content"  : "개요최근 powerbuilder로 개발된 레거시 시스템을 웹 환경으로 전환할 예정이라는 이야기를 들었다 powerbuilder 코드는 유지보수와 협업이 매우 어려웠고 git으로도 관리하기도 상당히 까다로웠다 특히 pbl 파일은 바이너리 형식이기 때문에 변경 내역을 추적하거나 병합하는 데 한계가 있었고 이로 인해 개발 생산성과 협업 효율성 모두 낮은 상황이었다 이를 보완하기 위해 pbdumper를 활용하여 pbl 파일 내의 객체들을 srd srw sru 등의 텍스트 파일로 추출하여 형상 관리를 진행하는 워크플로우 아래와 같이 구성했었다 변경 사항을 감지해 push 대상 텍스트 파일을 안내하고 지정된 과정을 수행하지 않으면 push가 불가능하도록 pre push hook을 설정했으며 pull 시에는 리모트와 로컬의 head를 비교하여 변경된 파일을 powerbuilder에 import하라는 안내 메시지를 출력하는 bat 스크립트를 제작했다 powerbuilder는 텍스트 파일로 pull을 받아도 pbl에 import하지 않으면 실제 코드에 반영되지 않기 때문에 이 과정이 필수적이다 하지만 이러한 과정은 대부분 수동으로 이루어졌기 때문에 작은 실수 하나도 실제 코드에 영향을 줄 수 있는 구조였다 따라서 비효율적인 구조를 계속 유지하기보다는 웹 환경으로 마이그레이션한다면 생산성과 유지보수성 측면에서 훨씬 더 유리할 것이라는 판단이 들었다 하지만 오래된 프로그램일수록 다양한 기능들이 서로 얽혀 있어 구조가 복잡하고 새로운 환경으로 전환하는 데 팀 전체의 시간과 자원이 많이 소모될 수 밖에 없어서 효율적인 방법이 필요했다 이런 고민을 하던 중 기존 프로젝트 코드를 기반으로 다른 언어나 프레임워크로의 전환을 도와주는 도구인 cursor ai를 알게 되었고 현재 학습 중인 내용을 정리해 두기 위해 이 글을 작성하게 되었다 cursor 커서는 개발 워크플로우를 향상시키는 강력한 ai 우선 코드 편집기입니다 설치 후 원활하게 연동되는 이러한 핵심 기능에 액세스하여 생산성을 높일 수 있습니다 코드베이스를 이해하고 컨텍스트 인식 제안을 제공하는 ai 기반 코드 완성 질문 편집 및 에이전트 모드로 코드를 탐색 이해 및 수정하기 위한 대화 인터페이스 복잡한 개발 작업을 처리하기 위한 지능형 도구아직 실제로 사용해보진 않았지만 문서 내용만 본다면 복잡한 마이그레이션 작업에 큰 도움이 될 수 있을 것 같다는 기대가 든다"
      } ,
  
    {
      "title"    : "RequestBody / ResponseBody",
      "category" : "",
      "tags"     : "",
      "url"      : "/spring/requestbody-responsebody",
      "date"     : "2024-08-23 00:00:00 +0000",
      "content"  : "requestbody httprequest body를 도메인 객체에 매핑하여 java 객체로 자동으로 역직렬화 post put patch 메서드와 함께 사용 data builderpublic class searchrequestdto private list lt string gt value restcontroller requiredargsconstructorpublic class searchcontroller private final searchservice searchservice postmapping getsearch public responseentity lt list lt searchresponsedto gt gt getsearch requestbody searchrequestdto searchrequestdto return responseentity ok searchservice getsearch searchrequestdto service requiredargsconstructorpublic class searchservice private final searchrepository searchrepository public list lt searchresponsedto gt getsearch searchrequestdto searchrequestdto list lt searchresponsedto gt returnvalue new arraylist lt gt list lt search gt searchvalues searchrepository getsearch searchrequestdto getvalue for search search searchvalues returnvalue add new searchresponsedto search return returnvalue responsebody 객체를 json으로 직렬화하여 httpresponse 객체로 다시 전달 restcontroller를 사용할 때 해당 어노테이션이 포함되어 있어서 주로 controller와 사용된다 참고 spring s requestbody and responsebody annotations difference between requestbody and responsebody annotation in spring"
      } ,
  
    {
      "title"    : "Controller / RestController",
      "category" : "",
      "tags"     : "",
      "url"      : "/spring/controller-restcontroller",
      "date"     : "2024-08-21 00:00:00 +0000",
      "content"  : "controller 일반적으로 requestmapping과 함께 사용 뷰를 반환해야 할 때 가장 적합 model 객체와 함께 사용restcontroller spring 4 0에 도입된 restful 웹 서비스를 구축하는 spring 접근 방식 controller와 responsebody를 모두 포함하는 축약형 어노테이션 모든 메서드가 뷰 html thymeleaf jsp 대신 도메인 객체를 반환 반환 객체를 자동으로 httpresponse로 직렬화 spring boot starter web 의존성에 jackson 라이브러리가 존재하기에 자동으로 인스턴스를 json으로 변환한다 참고 building a restful web service annotation interface restcontroller the spring controller and restcontroller annotations"
      } ,
  
    {
      "title"    : "나는 LINE 개발자입니다",
      "category" : "",
      "tags"     : "",
      "url"      : "/book/I-am-a-LINE-developer",
      "date"     : "2024-06-10 00:00:00 +0000",
      "content"  : "개발 공부를 하면서 개발 서적은 읽어본 적이 없었다 그래서인지 갑자기 책을 읽고 싶어졌다 예전에 인프콘에서 받은 나는 line 개발자입니다 책이 눈에 들어와서 읽어보았다 책을 읽은 건 정말 오랜만이라 글이 잘 안 읽히기도 했지만 개발 관련의 글이어서 읽다 보니 조금씩 계속 읽게 되었다 이 책을 읽기 전엔 line은 메신저를 서비스하는 회사라고만 알고 있었다 하지만 내 생각보다 많은 서비스를 운영 중이었다 블록체인 금융 또 대기업에서는 정교한 프로세스를 통해 개발을 진행한다는 것을 알고는 있었지만 생각보다 더 세밀하게 진행이 된다는 것을 알게 되었다 물론 책에서 나온 과정들은 단편적이겠지만 실제로는 더 정교할 것이라고 예상된다 이러한 과정들이 기본이 되고 모두가 한뜻으로 같은 목표를 바라보면 앞으로도 계속 성장할 수밖에 없지 않을까 라는 생각이 든다 line의 개발자들이 어떠한 계기로 어떤 경험을 거치며 개발을 하게 되었는지 짧게나마 글 초반에 설명 해주는 부분이 재미있었다 가장 마음에 들었던 구문은p245 일단 해보면 된다는 것이다 p247 가끔 내 주변 동료들이 너무 뛰어나서 주눅이 들곤 했다 하지만 그런 생각이 나만의 문제가 아니라는 점을 2015년 파이콘에서 알게 되었다 내가 좋아하는 장고 프레임워크를 만든 제이컵 카플란 모스가 키노트에서 나는 중간정도 되는 개발자 라고 선언을 한 것이다 세상은 개발자가 뛰어나야만 한다는 편견으로 바라보지만 이런 생각은 도움이 안 되며 프로그래밍은 누구나 배울 수 있는 스킬로 노력해서 중간만 한다면 충분하기 때문에 스킬 자체가 뛰어나야만 가치 있는 개발자라는 생각을 버려야 한다고 했다 아직 난 개발에 있어서 매우 부족하다고 느낀다 이러한 감정을 떨쳐내기 위해 매일 조금씩이라도 개발에 관해 공부하며 흥미를 잃지 않도록 노력해야겠다는 생각이 든다 지금은 많이 부족한 개발자이지만 먼 훗날 뛰어난 개발 실력을 갖추게 되어 좋은 기업에 가서 이 글을 보며 지금 이 순간을 회상하고 싶다"
      } ,
  
    {
      "title"    : "cherry-pick",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/cherry-pick",
      "date"     : "2024-06-04 00:00:00 +0000",
      "content"  : "cherry pick특정 커밋을 선택하여 해당 변경사항을 현재 브랜치로 가져온다 git cherry pick 커밋해시 예시maindevmain 브랜치에 add subtract multiply 기능이 있고 dev 브랜치에 divide sqrt 기능이 있다 main lt dev로 merge를 하면 divide sqrt 기능이 합쳐지게 된다 만약 sqrt 기능은 필요없고 divide 기능이 필요할 때 cherry pick을 사용하면 된다 test 특정 커밋을 선택할 브랜치로 이동한다 dev 현재 divide의 해시는 d6cc 해당 기능을 적용할 브랜치로 이동 main git cherry pick d6cc push main 브랜치를 확인해보면 sqrt 기능이 빠지고 divide 기능만 적용되었다 options"
      } ,
  
    {
      "title"    : "2024.06 TIL",
      "category" : "til",
      "tags"     : "",
      "url"      : "/til/2024-06",
      "date"     : "2024-06-03 00:00:00 +0000",
      "content"  : "2024 06 03 git cherry pick workflow ruby build2024 06 04 ispresent requestbody responsebody requiredargsconstructor data git revert"
      } ,
  
    {
      "title"    : "OOP",
      "category" : "oop",
      "tags"     : "",
      "url"      : "/oop/oop",
      "date"     : "2023-10-29 00:00:00 +0000",
      "content"  : "추상화 abstraction 복잡한 자료 모듈 시스템 등으로부터 핵심적인 개념 또는 기능을 간추려 내는 것을 말한다 변수 함수 클래스도 모두 추상화이다 캡슐화 encapsulation 캡슐화는 데이터에 대해 동작하는 메커니즘 또는 메서드와 함께 데이터를 하나로 묶는다 캡슐화는 클래스 내부에서 구조화된 데이터 객체의 값 또는 상태를 숨기는 데 사용되며 숨겨진 구현 세부 사항을 노출하거나 상태 불변성을 위반할 수 있는 방식에 대한 직접 접근을 방지할 수 있다 캡슐화한 변수를 외부에서 접근 수정하려면 클래스 내부에서 해당 메서드 getter setter 를 만들어줘야 한다 파이썬은 캡슐화를 지원하지 않지만 파이썬의 규칙인 언더바 와 property로 캡슐화를 한다 파이썬의 캡슐화는 해당 변수나 메서드를 클래스 밖에서 직접 접근하여 쓰지 말라는 규칙일 뿐 실제로는 아무런 변화가 없다 언더바 class parent def init self self count 0 def getter self return self count def setter self count self count countp1 parent print p1 count 0p1 setter 1 print p1 count 1 property 데코레이터를 사용하여 getter setter 메서드를 정의하는 캡슐화다 class parent def init self self count 0 property def count self return self count count setter def count self value self count valuep1 parent print p1 count p1 count 1print p1 count property를 통해 동일한 메서드의 이름를 가진 count를 getter로 바꾸고 count setter를 통해 setter의 역할을 하게끔 만든다 네임 맹글링 name mangling 네임 맹글링 규칙은 주로 상위 클래스와 하위 클래스의 이름 충돌을 방지하기 위해 설계되었습니다 캡슐화된 변수에 접근하거나 수정하는 것은 여전히 가능합니다 네임 맹글링을 하게 되면 새로운 이름을 갖게 된다 변수나 메서드 이름을 변형시켜 외부에서 직접적인 접근을 어렵게 만든다 캡슐화는 아니다 class parent def init self self update 0 def get update self return self updateclass child parent def init self super init self update 1 def get update self return self updateparent obj parent child obj child print parent obj get update 0print child obj get update 1print dir parent obj parent update print dir child obj child update parent update print parent obj parent update 0print child obj child update 1print child obj parent update 0 dir로 확인해 보면 객체가 새로운 이름을 가진 것을 알게 된다 마지막 3줄을 보면 새로운 이름을 가진 객체로 변수에 접근할 수 있기에 캡슐화라고는 할 수 없다 상속 inheritance 모든 클래스는 object 클래스를 상속받는다 상속과 함께 사용하는 2가지 내장 함수는 isinstance issubclass 파이썬은 다중 상속을 지원한다 isinstance 인스턴스 유형을 확인할 때 사용class a passclass b passa1 a print isinstance a1 a trueprint isinstance a1 b falseissubclass 클래스 상속을 확인할 때 사용class a passclass b passprint issubclass a b falseprint issubclass list object true오버라이딩 객체 지향 프로그래밍에서 서브 클래스 또는 자식 클래스가 자신의 슈퍼 클래스 또는 부모 클래스 중 하나에 의해 이미 제공된 메소드를 특정한 형태로 구현하는 것 자바처럼 별도의 어노테이션을 적지 않는다 class parent def print self print 부모 class child parent def print self print 자식 c1 child c1 print 자식상속받은 부모 클래스의 print를 자식 클래스에서 print로 재정의하여 자식이 출력된다 super 자식 클래스에서 부모 클래스의 메서드를 사용하고 싶을 때 쓰는 함수class parent def init self self name 부모 def parent method self print 부모 메서드 class child parent def init self super init self name 자식 def child method self super parent method print 자식 메서드 c1 child print c1 name c1 child method 출력 자식부모 메서드자식 메서드 super 함수는 파이썬 내부에서 현재 인스턴스를 자동으로 참조하기 때문에 super 함수로 부모 클래스의 메서드를 쓸 때 self 파라미터를 쓰지 않아도 된다 참고다중 상속 파이썬에선 하나의 클래스가 여러 부모 클래스를 상속받는 것도 가능하다 파이썬은 다중 상속을 다룰 때 다이아몬드 상속과 같은 상황에서 mro를 사용한다 class a passclass b def print self print b에서 출력 class c def print self print c에서 출력 class child a b c passc1 child c1 print b에서 출력print child mro lt class main child gt lt class main a gt lt class main b gt lt class main c gt lt class object gt 클래스의 계층 구조를 깊이 우선으로 왼쪽에서 오른쪽으로 찾는다 mro는 a b c 순서로 메서드를 접근하며 child의 print 메서드가 a에 없으면 b 그다음 c 순으로 접근하며 print 메서드를 찾고 없으면 object 클래스에서 찾는다 a 클래스엔 print 메서드가 없으니 그다음인 b 클래스의 print 메서드로 출력mro method resolution order 자식 클래스가 부모 클래스를 2번 호출하지 않도록 하기 위해 mro가 동적으로 결정한다 메서드를 호출 시 mro에 나와 있는 순서대로 메서드를 탐색한다 mro vs help mro 다중 상속을 다룰 때 클래스의 메소드 해석 순서를 제공한다 help 객체나 모듈의 사용법과 관련된 정보를 제공한다 어떤 부모 클래스를 가지는지 보여준다 다형성 polymorphism 프로그래밍 언어의 자료형 체계의 성질을 나타내는 것으로 프로그램 언어의 각 요소들 상수 변수 식 오브젝트 함수 메소드 등 이 다양한 자료형 type 에 속하는 것이 허가되는 성질을 가리킨다 반댓말은 단형성 monomorphism 으로 프로그램 언어의 각 요소가 한가지 형태만 가지는 성질을 가리킨다 추상 기본 클래스 abstract base classes complement duck typing by providing a way to define interfaces when other techniques like hasattr would be clumsy or subtly wrong for example with magic methods 추상 기본 클래스는 hasattr 과 같은 다른 속성 검사 방법이 예상치 못한 결과를 가져올 경우 예 매직 메서드 인터페이스를 정의하는 방법을 제공함으로써 duck typing을 보완합니다 여러 클래스 간의 동일한 코드를 공유할 때 사용 일반 메서드와 추상 메서드도 선언 가능하다 상속받은 클래스는 추상 클래스의 추상 메서드를 모두 선언해 줘야 오류가 나지 않는다 파이썬은 기본적으로 추상 클래스를 제공하지 않기 때문에 abc abstract base class 모듈을 상속받아 구현한다 파이썬은 다중 상속이 가능하다 from abc import abc abstractmethodclass biycle abc def init self self speed 0 abstractmethod def speedup self increment int gt none pass def applybrakes self decrement int gt none self speed decrementclass roadbike biycle def speedup self increment self speed incrementclass electricbike biycle def speedup self increment self speed increment 2 def applybrakes self decrement super applybrakes decrement print 전기 자전거 브레이크 r1 roadbike r1 speedup 10 r1 applybrakes 10 e1 electricbike e1 speedup 10 e1 applybrakes 10 출력 0100020전기 자전거 브레이크10 만약 roadbike 클래스에서 speedup 메서드를 구현하지 않으면 아래와 같은 오류가 뜬다 r1 roadbike typeerror can t instantiate abstract class roadbike with abstract method speedupduck typing a programming style which does not look at an object s type to determine if it has the right interface instead the method or attribute is simply called or used if it looks like a duck and quacks like a duck it must be a duck by emphasizing interfaces rather than specific types well designed code improves its flexibility by allowing polymorphic substitution duck typing avoids tests using type or isinstance note however that duck typing can be complemented with abstract base classes instead it typically employs hasattr tests or eafp programming 객체가 올바른 인터페이스가 있는지 확인하기 위해 객체의 타입을 살펴보지 않는 프로그래밍 스타일입니다 대신에 메서드나 속성을 간단히 호출하거나 사용합니다 오리처럼 보이고 오리처럼 꽥꽥거린다면 오리일 것입니다 특정 타입보다는 인터페이스를 강조함으로써 잘 설계된 코드는 다형성 치환을 허용함으로써 유연성을 향상합니다 duck typing은 type 또는 isinstance 를 사용하는 테스트를 피한다 그러나 추상 기본 클래스와 보완될 수 있다 대신에 일반적으로 hasattr 테스트나 eafp 프로그래밍을 사용한다 eafp easier to ask for forgiveness than permission this common python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false this clean and fast style is characterized by the presence of many try and except statements the technique contrasts with the lbyl style common to many other languages such as c 허락보다는 용서를 구하기가 더 쉽다 일반적인 파이썬 코딩 스타일은 유효한 키나 속성이 존재한다고 가정하고 가정이 거짓임이 입증되면 예외를 잡아낸다 이 깨끗하고 빠른 스타일은 많은 try except 문이 존재한다는 것이 특징이다 이 기법은 c와 같은 다른 많은 언어의 공통적인 lbyl 스타일과 대조를 이룬다 my list 1 2 3 4 try value my list 3 except indexerror print 인덱스가 유효하지 않습니다 lbyl look before you leap this coding style explicitly tests for pre conditions before making calls or lookups this style contrasts with the eafp approach and is characterized by the presence of many if statements 도약하기 전에 살펴보라 이 코딩 스타일은 호출 또는 값을 찾기 전에 사전 조건을 명시적으로 테스트한다 이 스타일은 eafp 접근법과 대조되며 많은 if 문이 존재하는 것이 특징이다 my list 1 2 3 4 if len my list gt 3 value my list 3 else print 인덱스가 유효하지 않습니다"
      } ,
  
    {
      "title"    : "스프링 입문",
      "category" : "",
      "tags"     : "",
      "url"      : "/spring/spring-basic",
      "date"     : "2023-10-26 00:00:00 +0000",
      "content"  : "spring 웹 어플리케이션의 첫 진입점이 controller spring boot는 톰캣이라는 웹서버를 내장하고 있다 웹 개발을 할 때 크게 3가지 방법이 있다 정적컨텐츠 mvc와 템플릿 엔진 api정적컨텐츠 서버에서 웹 브라우저에 파일을 그대로 내려줌 controllerpublic class hellocontroller getmapping hello public string hello model model model addattribute data hello return hello 웹 브라우저에서 localhost hello static html을 접속한다 내장 톰캣 서버가 요청을 받음 스프링으로 넘기기 전에 hello static과 관련된 컨트롤러가 있는지 확인한다 없으면 resources static hello static html을 웹 브라우저로 반환한다 spring이 model을 하나 만들어서 넘겨준다 model addattribute를 통해 key value 형태로 넘겨준다 return에 적은 곳으로 렌더링 resourses templates 밑에 있는 hello html을 찾게된다 mvc와 템플릿 엔진 서버에서 변형하여 html을 내려준다 mvc가 등장하기 이전에는 model1 방식 view에서 모든 것을 처리함 view 화면에 그리는 데 집중 model controller 비즈니스 로직 내부 처리에 집중 controllerpublic class hellocontroller getmapping hello mvc public string hellomvc requestparam name string name model model model addattribute name name return hello template 웹 브라우저에서 localhost hello mvc를 접속한다 내장 톰캣 서버가 요청 받음 톰캣 서버가 hello mvc라는 것이 왔다고 스프링에게 전달 스프링은 hello mvc로 맵핑된 컨트롤러가 있는 걸 확인 이 메서드를 호출 리턴을 해줄 때 viewresolver가 hello template으로 반환 템플릿 엔진 thymeleaf 이 렌더링해서 변환한 html을 웹 브라우저에 반환viewresolver 뷰를 찾아주고 템플릿으로 연결api controllerpublic class hellocontroller getmapping hello api responsebody public hello helloapi requestparam name string name hello hello new hello hello setname name return hello static class hello private string name public string getname return name public void setname string name this name name 웹 브라우저에서 localhost hello api를 접속한다 내장 톰캣 서버가 요청을 받음 톰캣 서버가 hello api라는 것이 왔다고 스프링에게 전달 스프링은 hello api로 맵핑된 컨트롤러가 있는 걸 확인하는데 responsebody이라는 어노테이션이 붙어있는 걸 발견 responsebody가 있으면 http의 응답에 데이터를 넣어 동작 문자열이면 그대로 응답하면 되지만 객체일 때는 json 방식으로 데이터를 만들어서 http 응답에 반환하는 게 기본 정책 스프링에서 responsebody의 기본은 json 반환 객체를 넘기면 http의 메시지 컨버터가 동작한다 단순 문자열이면 stringconverter이 동작 객체면 jsonconverter라는게 동작한다 jsonconverter는 객체를 json으로 바꾸고 요청한 웹브라우저나 서버한테 json으로 보내준다 http accept 헤더에 json이라고 요청이 오면 json으로 받고 아무것도 안 보내면 다 받을 수 있다 아무것도 안 보내면 스프링이 알아서 요청한 형식으로 보낸다 getter setter는 자바 빈 규약 또는 프로퍼티 접근 방식이라고도 한다 참고 김영한 스프링 입문 코드로 배우는 스프링 부트 웹 mvc db 접근 기술"
      } ,
  
    {
      "title"    : "Apache Kafka",
      "category" : "kafka",
      "tags"     : "",
      "url"      : "/kafka/kafka",
      "date"     : "2023-10-24 00:00:00 +0000",
      "content"  : "apache kafka 빠르고 확장 가능한 작업을 위해 데이터 피드의 분산 스트리밍 파이프 라이닝 및 재생을 위한 실시간 스트리밍 데이터를 처리하기 위한 목적으로 설계된 오픈 소스 분산형 게시 구독 메시징 플랫폼입니다 kafka는 서버 클러스터 내에서 데이터 스트림을 레코드로 유지하는 방식으로 작동하는 브로커 기반 솔루션입니다 kafka 서버는 여러 데이터 센터에 분산되어 있을 수 있으며 여러 서버 인스턴스에 걸쳐 레코드 스트림 메시지 을 토픽으로 저장하여 데이터 지속성을 제공할 수 있습니다 토픽은 레코드 또는 메시지를 키 값 및 타임스탬프로 구성된 일련의 튜플 변경 불가능한 python 객체 시퀀스로 저장합니다 레코드는 변경 불가능한 커밋 로그라고 합니다 변경 불가능하다고 하는 것은 레코드를 추가할 수는 있지만 달리 변경할 수는 없기 때문입니다 여기에서 로그를 구독 데이터에 액세스 할 수 있으며 개수 제한 없이 여러 스트리밍 실시간 애플리케이션과 다른 시스템에서 로그에 게시 데이터 추가 할 수도 있습니다 kafka 등장 배경 전통적인 엔터프라이즈 메시징 시스템의 대안입니다 하루에 1조 4천억 건의 메시지를 처리하기 위해 linkedin이 개발한 내부 시스템으로 시작했습니다 apache kafka와 google cloud pub sub 같은 이벤트 스트리밍 시스템이 등장하기 전의 데이터 처리는 일반적으로 원시 데이터를 먼저 저장했다가 나중에 임의의 시간 간격으로 처리하는 주기적인 일괄 작업으로 다뤄져 왔습니다 예를 들어 통신 회사에서는 하루 한 주 또는 한 달이 지날 때까지 기다렸다가 수백만 건의 통화 기록을 분석하고 누적 요금을 계산할 수 있습니다 일괄 처리의 한계 중 하나는 실시간이 아니라는 점입니다 적시에 비즈니스 결정을 내리고 흥미로운 일이 발생할 경우 조치를 취하기 위해 데이터를 실시간으로 분석하고자 하는 조직은 점점 많아지고 있습니다 앞서 언급한 통신 회사에서는 전반적인 고객 경험을 향상시킬 한 가지 방법으로 고객에게 실시간 요금을 알려주는 것이 도움이 될 수 있습니다 여기서 이벤트 스트리밍의 필요성이 발생합니다 이벤트 스트리밍 이벤트 스트리밍은 데이터의 시간적 가치를 포착하는 것은 물론 흥미로운 일이 발생할 때마다 조치를 취하는 푸시 기반 애플리케이션을 만들기 위해 이벤트가 생성되는 대로 이벤트의 무한 스트림을 지속해서 처리하는 프로세스입니다 이벤트 스트리밍의 예 고객 대면 웹 애플리케이션에서 생성되는 로그 파일을 지속적으로 분석 사용자가 전자상거래 웹사이트를 탐색할 때 고객 행동을 모니터링하고 그에 대응 소셜 네트워크에서 생성되는 클릭 스트림 데이터의 변화를 분석하여 고객 감정에 지속해서 영향을 미치는 것 사물 인터넷 iot 기기에서 생성되는 원격 분석 데이터를 수집하고 그에 대응하는 것 데이터 처리를 위한 실시간 스트리밍kafka의 개념참고 kafka apache kafka란 무엇인가요 apache kafka란"
      } ,
  
    {
      "title"    : "Java Interface, Abstract",
      "category" : "",
      "tags"     : "",
      "url"      : "/java/interface-abstract",
      "date"     : "2023-10-22 00:00:00 +0000",
      "content"  : "interface 객체가 어떤 동작을 수행하는지만 정의하고 실제 동작 구현은 인터페이스를 구현하는 클래스에서 이뤄지는 것을 의미한다 gt 해당 클래스가 이러한 기능을 하는 메서드들 가지고 있다는 것을 표현 상속은 하나의 클래스만 가능하지만 인터페이스는 다중 구현이 가능하다 interface bicycle void speedup int increment void applybrakes int decrement class roadbike implements bicycle int speed 0 override public void speedup int increment speed speed increment override public void applybrakes int decrement speed speed decrement 구현 받은 클래스는 인터페이스에 있는 모든 메서드를 구현해야 컴파일 오류가 나지 않는다 외부 클래스가 인터페이스를 구현 받기 때문에 메서드들의 public abstract으로 선언되어야 한다 기본 선언이 public abstract 이기 때문에 생략할 수 있다 상수만 가질 수 있다 변수의 기본 선언은 public static final이기 때문에 생략할 수 있다 abstract 일반 메서드와 추상 메서드를 모두 선언할 수 있다 상속받은 클래스는 추상 클래스의 추상 메서드를 모두 선언해 줘야 오류가 나지 않는다 public 이외의 접근 제어자가 선언할 수 있다 다중 상속 불가능public abstract class bicycle int speed public abstract void speedup int increment void applybrakes int decrement speed decrement class roadbike extends bicycle override public void speedup int increment speed increment public class electricbike extends bicycle override public void speedup int increment speed increment 2 public class main public static void main string args roadbike roadbike new roadbike roadbike speed 10 roadbike speedup 10 roadbike applybrakes 20 electricbike electricbike new electricbike electricbike speed 10 10 electricbike speedup 10 30 electricbike applybrakes 10 20 추상 메서드에 abstract 제어자를 꼭 붙여줘야 한다 익명 클래스 클래스를 선언하고 동시에 인스턴스를 생성할 수 있다 주로 클래스를 한 번만 사용할 때 사용한다 public abstract class bicycle int speed public abstract void speedup int increment void applybrakes int decrement speed decrement public class main public static void main string args bicycle electricbike new bicycle override public void speedup int increment speed increment 2 electricbike speedup 10 20 electricbike applybrakes 10 10"
      } ,
  
    {
      "title"    : "Java Generic",
      "category" : "",
      "tags"     : "",
      "url"      : "/java/generic",
      "date"     : "2023-10-21 00:00:00 +0000",
      "content"  : "generic 컴파일 단계에서 더 많은 버그를 감지할 수 있도록 하여 코드에 안정성을 추가한다 제네릭을 사용하여 인터페이스나 메서드를 정의할 때 매개 변수에 타입을 지정하여 사용한다 클래스나 변수 메서드를 재사용할 수 있다 arraylist lt string gt stringlist new arraylist lt string gt 꺽쇠 안에 타입을 넣는 것이 제네릭의 기본 형태다 generic class 다양한 타입을 가질 수 있는 클래스public class box private object object public void set object object this object object public object get return object 컴파일을 할 때 object의 객체 타입 확인이 불가능해서 오류가 없는 코드라고 보일 수 있지만 런타임 때 오류가 생길 수 있기 때문에 제네릭 클래스를 사용하는 것이다 public class box lt t gt private t t public void set t t this t t public t get return t public class main public static void main string args box lt string gt stringbox new box lt gt box lt integer gt integerbox new box lt gt 위와 같이 타입 매개변수에 타입을 넣어주면 해당 타입으로 객체가 생성된다 타입 파라미터로 많이 쓰이는 이름은 t e타입 매개변수 명명 규칙e element collection 프레임워크에서 많이 사용 됨 arraylist lt e gt hashset lt e gt linkedlist lt e gt k key n number t type v value s u v etc 2nd 3rd 4th typesgeneric inheritance 제네릭 클래스에서도 상속의 개념이 존재한다 제한된 타입 매개변수를 사용할 수 있다 public class box lt t extends shape gt private t t public void set t t this t t public t get return t 매개변수의 타입이 shape 클래스를 상속받은 클래스여야 한다는 뜻이다 wildcards 제네릭 코드에서 는 알 수 없는 유형을 나타낸다 타입을 정확히 모르거나 상한 와일드카드 하한 와일드카드에 사용한다 상한 와일드카드하한 와일드카드"
      } ,
  
    {
      "title"    : "Java 상속",
      "category" : "",
      "tags"     : "",
      "url"      : "/java/inheritance",
      "date"     : "2023-10-20 00:00:00 +0000",
      "content"  : "상속 inheritance 자식 클래스에서 부모 클래스의 변수와 메서드를 사용할 수 있다 public class parent string name 이름 void method system out println 부모 메서드 public class child extends parent public class main public static void main string args child c1 new child system out println c1 name c1 method 출력이름부모 메서드 자식 클래스가 부모 클래스의 메서드를 덮어서 사용하려면 메서드 오버라이딩을 해줘야 한다 public class parent void method system out println 메서드 public class child extends parent override void method system out println 자식 메서드 public class main public static void main string args child c1 new child c1 method 출력자식 메서드super 자식 클래스가 부모 클래스의 변수 메서드 또는 생성자를 사용할 때 사용한다 super를 사용하지 않고 부모 클래스에 접근은 가능하지만 super를 사용하는 것이 가독성에 좋다 변수나 메서드를 사용할 때public class parent string name 부모 변수 void parentmethod system out println 부모 메서드 public class child extends parent string name 자식 변수 void childmethod string parentname super name super parentmethod system out println parentname system out println 자식 메서드 public class main public static void main string args child c1 new child c1 childmethod 출력부모 메서드부모 변수자식 메서드 부모와 자식의 변수명이 같을 경우 구분하기 위해 super를 사용할 때도 있다 생성자를 사용할 때public class parent string name public parent string name this name name public class child extends parent public child string name super name public class main public static void main string args child c1 new child 테스트 system out println c1 name 출력테스트생성자에서의 사용 규칙 자식 클래스의 인스턴스 생성 시 부모 클래스의 생성자는 반드시 불린다 부모 클래스의 생성자를 호출할 때 자식 클래스의 생성자 안에서 맨 윗줄에 적어야 한다 자식 클래스에서 부모 클래스의 생성자를 호출하지 않으면 부모 클래스의 기본 생성자를 호출한다 부모 클래스의 생성자가 없으면 자식 클래스는 부모 클래스의 기본 생성자를 부른다 부모 클래스에 파라미터를 받는 생성자가 있으면 반드시 해당 파라미터를 전달해줘야 한다 object class 모든 클래스는 object 클래스를 상속받는다 자바의 모든 객체는 object클래스의 메서드들을 사용할 수 있다 tostring equals clone public class parent string name public parent string name this name name override public string tostring return name public class main public static void main string args child c1 new child 테스트 system out println c1 출력테스트 system out print 메서드는 객체를 출력하게 되면 tostring 메서드를 호출한다 tostring 은 객체의 클래스 이름과 해시 코드가 출력된다 오버라이딩을 해서 원하는 출력으로 변경하면 오버라이딩이 된 tostring 메서드를 호출하여 위와 같은 출력이 나오게 된다"
      } ,
  
    {
      "title"    : "Java",
      "category" : "",
      "tags"     : "",
      "url"      : "/java/java",
      "date"     : "2023-09-13 00:00:00 +0000",
      "content"  : "변수 이름 규칙 변수의 대소문자를 구분한다 숫자로 시작할 수 없다 예약어 사용 불가 특수기호는 언더바 외에는 사용불가 카멜 케이스 기법으로 작성자료형기본 자료형 primitive type byte short int 2 31 2 31 1 long 숫자 뒤에 l을 붙여서 값이 long형 이라는 것을 표시해줘야한다 float 소수 뒤에 f를 붙여야 한다 double 자바에서는 float보다 double을 더 많이 사용한다 부동 소수점 char 한 글자 boolean참조 자료형 reference type string은 기본 자료형이 아님 객체 또느 클래스 정수형끼리의 연산은 정수형 결괏값 피연산자 중 하나라도 소수형이 있으면 소수형 결괏값형 변환 작은 데이터 타입에서 큰 데이터 타입으로 자동 형변환int x 10 double y x gt gt gt 10 0타입캐스팅 강제적으로 형을 변환시킬 수 있다 데이터 손실의 가능성 존재double a 10 5 int b int a gt gt gt 10배열int 변수명 new int 배열 크기 int arr 1 2 3 4 5 이 방법은 변수를 정의할 때만 사용 가능2차원 배열int arr int arr 1 2 3 4 5 6 int arr new int 2 3 객체 속성 변수 들과 동작 메서드 들의 묶음클래스 객체의 설계도public class coin string name bigdecimal price string timestamp 메서드 클래스에 있는 함수boolean orderbid string name 리턴 값이 없으면 void를 써주면 된다 인스턴스 클래스를 기반으로 만들어진 객체coin c1 new coin c1 name 비트코인 c1 price 35000000 c1 timestamp 1694610388994 new 인스턴스를 생성하는 메서드접근 제어자 클래스 인터페이스 변수 메서드 등의 접근 권한이 어디까지인지 정해준다 public protected defualt private메서드 오버로딩 메서드 명은 같지만 파라미터에 따라 다르게 정의 되는 것생성자 인스턴스를 만들고 인스턴스 변수를 초기화하기 위해서 사용 클래스에 생성자가 없으면 컴파일러가 자동으로 파라미터가 없는 생성자를 제공 생성자를 하나라도 만들면 기본 생성자는 자동으로 제공되지 않는다 public class coin private string name private bigdecimal price private string timestamp public coin string name bigdecimal price string timestamp this name name this price price this timestamp timestamp public static void main string args coin c1 new coin 비트코인 new bigdecimal 35000000 1694610388994 this 현재 객체나 인스턴스를 가리킨다 파라미터 이름과 인스턴스 변수를 구분하기 위해 사용된다 인스턴스 메서드나 생성자에서 사용된다 생성자로 사용할 땐 아래와 같다 public coin string name string timestamp this 비트코인 new bigdecimal 0 1694610388994 기본형 primitive type vs 참조형 reference type 기본형 변수가 값을 직접 보관 스택에 저장 초기화하지 않으면 타입의 기본값으로 초기화참조형 메모리에 값이 저장되고 변수는 그 영역을 가리킴 객체는 heap 참조 값은 stack에 저장 초기화 하지 않으면 null로 초기화null 비어있는 값 참조형 변수만 가질 수 있다 null 값을 가진 참조형 변수를 호출하면 nullpointerexception 발생 try catch나 null 체크를 통해 오류 처리final 상수 할당된 이후에는 값을 변경할 수 없다 final 메서드는 자식 클래스에서 오버라이딩할 수 없다 fianl 클래스는 상속될 수 없다 상수는 대문자로 쓰고 단어 구분은 언더바로 한다 배열의 length 변수도 상수다 인스턴스 변수 vs 클래스 변수 인스턴스 변수는 각 객체마다 별도로 존재하는 변수class count int num 1 public static void main string args count c1 new count count c2 new count c2 num 2 system out println c1 num 1 system out println c2 num 2 클래스 변수는 모든 인스턴스가 공유하는 변수 static 키워드로 선언해야 한다 class count static int num 1 public static void main string args system out println count num 1 count num 2 system out println count num 2 인스턴스 메서드 vs 클래스 메서드 인스턴스 메서드는 인스턴스를 생성해야 사용할 수 있다 class count int num public void setcount int value this num value public int getcount return this num 클래스 메서드는 인스턴스를 생성하지 않은 클래스에서 사용한다 string math arrays collections 등의 클래스도 클래스 메서드다 class count static int num public static void addcount num public static void main string args count addcount 1 count addcount 2 wrapper 클래스 기본 자료형을 참조형처럼 다루어야할 때 사용한다 integer double character boolean byte short long floatarraylist 동적 배열을 구현한 클래스import java util arraylist public static void main string args arraylist lt string gt coinlist new arraylist lt gt coinlist add 비트코인 coinlist add 리플 coinlist size 2 coinlist get 0 0번 째 요소 가져오기 coinlist remove 1 1번 째 요소 삭제 coinlist clear 모든 요소 삭제 arraylist는 기본 자료형을 넣을 수 없어서 wrapper 클래스를 넣어야 한다 이외에도 contains set indexof addall 등이 있다 hashmap key value 쌍으로 데이터를 저장한다 key 값은 주로 string을 쓰지만 다른 데이터 타입도 가능하다 하나의 key엔 하나의 원소만 저장 가능 같은 키로 추가하면 마지막에 추가한 요소로 덮어진다 key나 value에 null이 허용된다 import java util hashmap public static void main string args hashmap lt string bigdecimal gt coinvalues new hashmap lt gt coinvalues put 비트코인 new bigdecimal 35000000 coinvalues get 비트코인 35000000 해시 함수를 사용하여 키를 해시 코드로 변환한다 변환한 해시 코드를 인덱스로 계산하여 값을 저장한다 서로 다른 키가 같은 해시 코드를 가질 수 있는 것을 해시 충돌이라고 한다 이것을 방지하기 위해자바에서는 레드 블랙 트리를 사용한다 같은 버킷에 여러 개의 key value 쌍으로 저장한다 버킷은 배열의 한 칸을 의미한다 하나의 해시 코드에 대응하여 데이터를 보관한다"
      } ,
  
    {
      "title"    : "Celery",
      "category" : "",
      "tags"     : "",
      "url"      : "/python/celery",
      "date"     : "2023-09-08 00:00:00 +0000",
      "content"  : "celery 파이썬 기반으로 작성된 분산 작업 큐 시스템 비동기적으로 작업을 처리하고 스케줄링할 수 있는 라이브러리task 백그라운드에서 실행되어야 하는 작업broker celery에서 메시지를 주고받기 위해 브로커가 필요하다 브로커를 통해 task가 큐에 추가된다 여러 가지가 있지만 rabbitmq redis amazon sqs를 사용하는 것이 권장된다 worker task를 실행하는 프로세스 또는 스레드 큐를 모니터링하고 새로운 task가 추가되면 실행한다 결과 보관하기 작업의 결과를 저장하고 검색할 수 있다 app celery tasks backend redis localhost broker pyamqp django와 함께 사용하기 경로 프로젝트 프로젝트 celery py proj manage py proj init py celery py settings py urls pyimport osfrom celery import celery django 설정 모듈 지정os environ setdefault django settings module 프로젝트 이름 settings celery 앱 생성app celery 프로젝트 이름 django settings py에서 celery를 설정하겠다 app config from object django conf settings namespace celery task 모듈 자동으로 찾기app autodiscover tasks app task bind true ignore result true def debug task self print f request self request r app config from object django conf settings namespace celery 모든 celery 구성 옵션을 소문자 대신 대문자로 지정한다 celery 6 0 버전 이후에는 소문자로 변경해야 한다 app autodiscover tasks 위와 같은 코드를 쓰면 다음과 같은 규칙으로 모든 앱에서 tasks py를 찾는다 app1 tasks py models py app2 tasks py models py shared task 앱 안에서 비동기 작업을 정의할 때 사용함 프로젝트에 의존하지 않고 작업을 생성 여러 앱 또는 프로젝트 간에 celery 작업 공유 가능 app task는 현재 앱에서만 해당 작업을 등록하고 정의한다 django celery results celery 작업의 결과를 저장하고 조회할 수 있는 django의 앱 캐시 시스템을 통해 빠르게 결과를 조회할 수 있음 settings pycaches default backend django core cache backends redis rediscache location redis localhost 6380 0 django celery beat 주기적으로 실행되어야 하는 작업을 관리할 수 있다 settings pycelery broker url redis localhost 6380 0 celery beat scheduler django celery beat schedulers databasescheduler celery beat schedule fetch data every second task 앱 이름 tasks my task schedule 1 0 실행 celery a 프로젝트이름 beat"
      } ,
  
    {
      "title"    : "정규화",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/normalization",
      "date"     : "2023-09-06 00:00:00 +0000",
      "content"  : "이상 현상 데이터베이스에서 삽입 갱신 삭제를 제대로 할 수 없는 경우 데이터 모델링을 제대로 하지 않았을 때 발생정규화 데이터의 중복을 최소화하고 데이터 일관성을 유지하기 위한 중요한 프로세스 이상 현상을 제거하는 데 필요 여러 가지 정규화가 있지만 제3 정규형에 만족하면 정규화가 잘 된 데이터베이스 데이터 모델을 만들고 실제 데이터베이스에 반영하기 전에 적용하는 것이 좋다 1nf 제1 정규형 각 컬럼은 더 이상 분해할 수 없는 최소한의 데이터 단위여야 한다 1nf를 만족하지 않는 테이블 price balance 컬럼의 값이 원자적이지 않다 1nf를 만족하는 테이블함수 종속성 테이블 안의 attribute들 사이에서 생기는 관계 x컬럼의 값에 따라 y컬럼의 값이 결정될 때 y는 x에 함수 종속성이 있다고 표현 x gt y 하나의 컬럼 값으로 다른 컬럼의 값이 결정되는 것 한 테이블에 여러 개의 함수 종속성이 있을 수도 있다 이행적 함수 종속성 x gt y y gt z 일 때 x gt z를 만족시키는 것을 의미한다 candidate key 후보키 하나의 로우를 특정지을 수 있는 attribute들의 최소 집합 여러 개의 후보키가 있을 수 있지만 하나의 pk만 있을 수 있다 candidate key에 포함되는 속성들을 prime attribute candidate key의 일부가 아닌 모든 속성은 none prime attribute2nf 제 2정규형 1nf를 만족해야 한다 후보키의 일부에 대해서만 종속되는 non prime attribute가 없어야 한다 부분 함수 종속성 2nf를 만족하지 않는 테이블 coin name은 price와 balance에 종속되어 있고 user id에 종속되어 있지 않다 price와 balance는 user id와 무관하게 coin name에 의해 결정되므로 부분 함수 종속성2nf를 만족하는 테이블3nf 제 3정규형 2nf를 만족해야 한다 테이블 안에 있는 모든 attribute들은 pk에 대해서만 함수 종속성이 있어야 한다 이행적 함수 종속성을 제거해야 한다 비정규화 성능 개선을 위해 정규형에 부합하는 테이블을 정규형을 지키지 않게 바꿈 정규화된 데이터베이스에서 원하는 데이터를 찾기 위해 조인을 통해서 테이블 합쳐야 하는 경우가 많다 이러한 조인을 회피하여 쿼리 성능 개선 읽기 read 연산이 많은 경우에 사용"
      } ,
  
    {
      "title"    : "type hint",
      "category" : "",
      "tags"     : "",
      "url"      : "/python/type-hint",
      "date"     : "2023-08-28 00:00:00 +0000",
      "content"  : "type hint 파이썬에서 정적 타입 언어처럼 타입을 표시할 수 있는 기능 실행에 직접적인 영향을 주지 않지만 변수나 메서드의 타입을 빠르게 파악하기 위해 사용한다 파이썬 3 5 버전부터 추가됨 typing 모듈로 타입 힌트 사용 가능사용 방법from typing import list dict tuplenums list int 1 2 3 4 5 scores dict str int a 100 b 95 test tuple str int float t 1 2 0 def add a int b int gt int return a b 변수 이름 뒤에 콜론을 쓰고 타입을 쓰면 된다 메서드의 리턴 값은 함수 뒤에 화살표를 쓰고 타입을 지정any 모든 유형이 가능하다 from typing import anydef output value any gt any return valueunion x 또는 y를 의미한다 3 10 버전부터 를 이용해서 표현할 수 있다 from typing import uniondef output value union int str gt str return str value def output value int str gt str return str value optional 어떤 타입 또는 none을 가질 수 있다 optional x 는 union x none 로 사용할 수 있다"
      } ,
  
    {
      "title"    : "MySQL Modeling",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/modeling",
      "date"     : "2023-08-15 00:00:00 +0000",
      "content"  : "데이터 모델링 목적 데이터베이스 설계 entity attribute relationship constraint 파악 논리적 모델링과 물리적 모델링으로 구분데이터 모델entity 개체 데이터베이스에서 저장 및 관리되는 대상 로우 entity type은 엔티티의 집합 테이블 attribute 속성 entity가 가지고 있는 내용 테이블의 컬럼 relationship 관계 entity들 사이의 연결점 일대일 일대다 다대다 등 다양한 유형 존재개체 속성 관계는 제약 조건이 있다 relational 모델 데이터를 표현하고 관리하는 가장 일반적인 모델 relation은 테이블을 의미하는 수학적 표현 fk를 사용하여 테이블 간의 관계를 만듦entity realtionship 모델 erm 데이터를 테이블 형태로 표현하지 않음 관계의 특징에 따라 모델링 하는 방법이 바뀜 student course enrolls 수강하다 id lt gt gt id no student id name code name 데이터 모델 종류 모델의 표현 정도에 따라 3종류로 구별개념 모델 entity와 간단한 연결 관계만을 나타냄 대략적인 구조를 파악할 때 사용논리 모델 entity attribute pk fk 표시물리 모델 데이터베이스를 구축할 수 있을 정도로 자세한 정보가 담긴 모델 attribute에 사용할 데이터 타입 변수 이름 인덱스 표시논리적 모델링비즈니스 룰 조직의 운영 방침 정책 규칙 등을 웹 사이트 설계와 관련하는 것 entity attribute relationship 고려하여 데이터베이스의 구조와 동작을 정의하는 역할 모델링을 할 때 id fk는 개발자가 추가해 주는 게 좋다 entity 명사relationship 동사attribute 값으로 표현할 수 있는 명사 여러 값을 가지면 entity로 사용될 수 있다 예시 비즈니스 룰 주문이 완료된 이후에는 취소할 수 없다 제품의 재고 수량이 0 이하가 되면 해당 제품은 주문할 수 없다 사용자 계정 비밀번호는 최소 8자 이상이어야 하며 대문자 소문자 숫자 특수문자를 모두 포함해야 한다 할인 코드는 특정 기간에만 유효하며 중복 사용할 수 없다 일부 상품은 특정 결제 방법으로만 구매할 수 있다 cardinality 카디널리티 한쪽 엔티티가 다른 엔티티와 얼마나 연결될 수 있는지 나타내는 개념 일대일 일대다 다대다 관계가 있다 관계가 하나도 없어도 되거나 하나의 관계가 꼭 있어야 하는 것을 최소 카디널리티라고 한다 카디널리티 erm 관계 선 끝에 표시하여 표현 최소 연결 되는 숫자는 최대 연결될 수 있는 기호보다 안쪽에 표시일대일 관계 모델링 필수로 있어야 하는 fk는 참조하는 entity에 넣어도 된다 최소 카디널리티가 0인 테이블에 fk를 만든다 일대다 관계 모델링 fk는 항상 다 쪽의 entity에 추가하여 null을 방지한다 다대다 관계 모델링 연결 테이블 junction table 을 사용하여 모델링 연결 테이블은 관계를 저장하기 위한 테이블 junction table student enrollment course id 1 id 1 id name student id course name course id instructor"
      } ,
  
    {
      "title"    : "MySQL Foreign Key",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/mysql-foreign-key",
      "date"     : "2023-08-06 00:00:00 +0000",
      "content"  : "foreign key 참조 무결성을 지키기 위해 필요 개념적으로 존재한다고 해서 참조 무결성이 지켜지는 것이 아니다 foreign key를 지정해줘야만 참조 무결성을 지켜준다 테이블에서는 foreign key도 제약 조건이다 제약 조건 이름을 설정하지 않아도 mysql에서 자동으로 붙여준다 alter table 테이블 이름 add constraint 제약 조건 이름 foreign key 참조하는 컬럼 references 참조되는 테이블 이름 참조되는 컬럼 예시alter table film actoradd constraint film constraintforeign key film id references film film id foreign key 삭제alter table 테이블 이름 drop foreign key foreign key 이름 테이블 스키마 파악하기show create table 테이블 이름 restrict 정책 자신을 참조하고 있는 자식 테이블의 로우가 하나라도 있으면 부모 테이블의 로우를 삭제 갱신할 수 없다 cascade 정책 부모 테이블 로우가 삭제 갱신될 때 참조하던 자식 테이블의 로우도 같이 삭제 갱신됨set null 정책 부모 테이블의 로우가 삭제 갱신될 때 참조하던 자식 테이블의 foreign key 컬럼의 값을 null로 바꿈on delete와 on update에서 서로 다른 정책을 설정할 수 있다 물리적 foreign key 실제로 foreign key를 설정해서 제약 조건을 구현논리적 foreign key 데이터베이스 설계 단계에서 사용되는 개념 데이터의 의미와 관계를 설명하는데 중점논리적 foreign key를 사용하는 이유 물리적 foreign key의 성능 저하 인덱스 관리 무결성 검사 조인 연산 복잡한 관계 데이터 일관성 유지"
      } ,
  
    {
      "title"    : "MySQL Table",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/mysql-table",
      "date"     : "2023-08-05 00:00:00 +0000",
      "content"  : "컬럼 데이터 타입 숫자형 type bytes signed unsigned tinyint 1 128 127 0 255 smallint 2 32768 32767 0 65535 mediumint 3 8388608 8388607 0 16777215 int 4 2147483648 2147483647 0 4294967295 bigint 8 9223372036854775808 9223372036854775807 0 18446744073709551615 실수형 고정 소수점 decimal m d m 총 자릿수 d 소수점 뒤 자릿수 decimal 5 2 gt 999 99 999 99 부동 소수점 type bytes 범위 float 4 3 4028235e 38 1 17549435e 38 1 17549435e 38 3 4028235e 38 double 8 1 7976931348623157e 308 2 2250738585072014e 308 2 2250738585072014e 308 1 7976931348623157e 308 날짜 및 시간 type 값 date yyyy mm dd datetime yyyy mm dd hh mm ss time hh mm ss timestamp yyyy mm dd hh mm ss utc year yyyy 문자열 type 길이 참고 char 0 255 고정 길이 varchar 0 65 535 가변 길이 text 0 65 535 tinytext text mediumtext longtext 물리 삭제 row를 삭제delete from actor where id 1 논리 삭제 삭제를 나타내는 컬럼을 생성 후 삭제가 되었다는 값을 기입update actor set is deleted 1 where id 1 컬럼 추가alter table 테이블 이름 add 컬럼 이름 데이터 타입 속성 컬럼 이름 변경alter table 테이블 이름 rename column 기존 컬럼 이름 to 새로운 컬럼 이름 컬럼 삭제alter table 테이블 이름 drop column 삭제할 컬럼 이름 컬럼 데이터 타입 변경alter table 테이블 이름 modify 컬럼 이름 데이터 타입 현재 컬럼의 값이 변경할 데이터 타입과 다를 경우 컬럼의 값을 바꿀 데이터 타입으로 먼저 바꾸고 나서 컬럼의 데이터 타입을 변경해야 한다 컬럼 속성 변경alter table 테이블 이름 modify 컬럼 이름 데이터 타입 속성 컬럼 속성 변경 시 원래 데이터 타입도 써줘야 한다 데이터 타입과 컬럼 속성을 동시에 변경할 수도 있다 컬럼 default 설정alter table 테이블 이름 modify 컬럼 이름 데이터 타입 속성 default 설정할 값 컬럼에 현재 시간 넣기now insert into employees created at values now datetime timestamp 타입의 컬럼에서 사용할 수 있는 속성default current timestamp 새 row가 추가 될 때 해당 컬럼의 값을 현재 시각으로 설정create table my table id int not null auto increment primary key content varchar 255 created at timestamp default current timestamp 결과insert into my table content values test on update current timestamp 해당 컬럼이 업데이트되면 현재 시각으로 갱신되게 설정create table my table id int not null auto increment primary key content varchar 255 created at timestamp default current timestamp updated at timestamp default current timestamp on update current timestamp 결과insert into my table content values test update my table set content test2 where id 1 컬럼 uniquealter table 테이블 이름 modify 컬럼 데이터 타입 속성 unique 컬럼을 테이블의 첫 번째 위치로 옮기기alter table 테이블 이름 modify 컬럼 데이터 타입 속성 first 컬럼 순서 바꾸기alter table 테이블 이름 modify 컬럼 데이터 타입 속성 after 컬럼 컬럼 이름과 컬럼 데이터 타입 속성을 동시에 수정하기alter table 테이블 이름 change 기존 컬럼 바꿀 컬럼 데이터 타입 속성 여러 작업 동시에 수행alter table 테이블 이름 change drop column add 테이블 constraint 무결성을 유지하고 데이터의 일관성을 보장하기 위해 사용되는 조건alter table 테이블 이름 add constraint 제약 조건 이름 check 조건 제약 조건 삭제alter table 테이블 이름 drop constraint 제약 조건 이름 테이블 이름 변경rename table 현재 테이블 이름 to 바꿀 테이블 이름 테이블 복사create table 테이블 이름 as select from 복사할 테이블 이름 테이블 컬럼 데이터 타입 제약 조건 등을 복사create table 테이블 이름 like 복사할 테이블 이름 다른 테이블 로우를 복사하기create table 테이블 이름 like 복사할 테이블 이름 insert into 테이블 이름 select from 복사할 테이블 이름 두 테이블의 컬럼 구조가 같아야 한다 truncate 테이블 데이터 전체 삭제truncate table 테이블 이름"
      } ,
  
    {
      "title"    : "Django Testing",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/testing",
      "date"     : "2023-07-09 00:00:00 +0000",
      "content"  : "testing 단위테스트는 python 표준 라이브러리에 내장된 모듈인 unittest django 애플리케이션의 테스트는 client를 사용한다 django에서 테스트 데이터베이스가 생성되고 통과 여부 상관없이 모든 테스트가 실행되면 테스트 데이터베이스가 삭제된다 테스트 코드에서는 각각의 테스트 메서드는 독립적으로 실행되고 테스트 메서드가 실행될 때마다 새로운 데이터베이스가 생성된다 test keepdb의 옵션을 사용하면 데이터베이스가 삭제되는 것을 방지할 수 있다 데이터베이스가 존재하지 않으면 생성된다 테스트 데이터베이스 이름은 test 로 생성된다 테스트 케이스에 문제가 없으면 아래와 같은 결과가 뜬다 found 1 test s creating test database for alias default system check identified no issues 0 silenced ran 1 test in 0 033sokdestroying test database for alias default unittest 클래스 기반 접근 방식을 사용하여 테스트 정의 상속받는 클래스는 from django test import testcase인데 기존 unittest의 기능을 포함하면서 django와 같이 쓸 수 있는 클래스다 client http 요청을 하고 요청에 대한 응답을 검증하는 기능을 제공 view를 테스트하고 django 기반 애플리케이션과 상호 작용 가능making requestsgetget path data none follow false secure false headers none extra c client response c get self assertequal response status code 200 postpost path data none content type multipart content follow false secure false headers none extra c client response c post reverse order ask data json data content type application json self assertequal response status code 200 testing responses get 과 post 메서드는 모두 response 객체로 반환한다 django view에서 반환하는 httpresponse 객체와는 다르다 response 속성많이 쓸 거 같을 것만 정리했다 content 서버에서 반환된 응답 byte 형식으로 제공되기 때문에 파일 다운로드 이미지 응답 처리 등 바이너리 데이터를 다룰 때 유용context 렌더링하는 뷰에서 context 변수를 전달할 때 사용exc info 응답이 예외를 발생시켰을 때 예외 대한 정보를 제공json content 속성에서 응답이 json일 경우 json 형식으로 직렬화하는 것을 편리하게 구성request 테스트 요청에 대한 객체 path info sml trade order bid request method post server port 80 wsgi url scheme http content length 101 content type application json wsgi input lt django test client fakepayload object at 0x7fbc449ee350 gt query string status code 상태 코드테스트 케이스 클래스 파이썬의 uniitest testcase를 상속받아 django에서는 4개의 테스트 케이스 클래스가 존재한다 simpletestcase 파이썬의 uniitest testcase를 상속받아 빠른 테스트 케이스 작성을 위해 사용 데이터베이스를 사용하지 않을 때 사용 데이터베이스 쿼리를 허용하지 않음 django와 같이 사용할 수 있는 테스트 케이스 제공transactiontestcase simpletestcase를 상속받아 데이터베이스 트랜잭션 동작을 테스트할 때 사용 데이터베이스 fixtures를 사용하여 초기 데이터를 설정 가능 특정 메서드를 스킵하여 테스트 할 수 있음testcase transactiontestcase를 상속받음 django에서 테스트를 작성하는 데 사용하는 가장 일반적인 클래스 setuptestdata 를 사용하여 초기 데이터를 설정liveservertestcase transactiontestcase를 상속받아 실제 서버 환경에서 테스트하는 클래스setupclass vs setuptestdata setupclass는 클래스에 해당하는 전체 초기화 작업을 수행 setuptestdata는 테스트 데이터를 설정하기 위해 사용"
      } ,
  
    {
      "title"    : "unittest",
      "category" : "",
      "tags"     : "",
      "url"      : "/python/unittest",
      "date"     : "2023-07-06 00:00:00 +0000",
      "content"  : "unittest 자바에서 사용되는 junit으로부터 영감을 받아 개발된 파이썬의 단위 테스트 프레임워크 객체 지향적인 방법을 지원unittest의 객체 지향 개념test fixture 테스트를 수행할 때 필요한 준비와 관련된 동작 proxy 데이터베이스 생성 디렉터리 생성 서버 프로세스 시작 등 proxy 데이터베이스 실제 데이터베이스와 유사한 동작을 하는 가상의 데이터베이스test case 테스트 개별 단위test suite 여러 개의 테스트 케이스를 묶어서 실행할 수 있는 단위test runner 테스트 실행을 관리하고 테스트 결과를 사용자에게 제공하는 역할을 하는 컴포넌트 gui tui로 사용자에게 결과를 보여준다 구조 테스트 케이스를 작성하려면 unittest testcase를 상속받거나 functiontestcase를 사용해야 함functiontestcase 일반적인 메서드나 함수를 테스트 케이스로 변환import unittestclass test unittest testcase def setup self self data 1 2 3 4 5 def test length self self assertequal len self data 5 def test contains self self assertin 3 self data self assertnotin 6 self data def teardown self self data noneif name main unittest main test로 시작하는 함수명을 찾아서 테스트로 실행한다 테스트를 하기 위해서는 assert 메서드 중 하나를 사용해야 한다 실행 결과성공 ran 2 tests in 0 000sok 점 2개는 각각의 테스트 메서드가 성공적으로 실행됐다는 뜻실패fail test contains main mytestcase assertionerror 3 unexpectedly found in 1 2 3 4 5 ran 2 tests in 0 000s클래스와 함수여러 가지가 있으니 필요에 따라 사용하는 게 좋을 거 같다 assert 메서드 모든 assert 메서드는 msg 인자를 받을 수 있다 메서드 검사 내용 참고 assertequal a b a b 데이터 유형에 따라 적절하게 형 특화 메서드가 자동으로 선택 assertnotequal a b a b asserttrue x bool x is true assertfalse x bool x is false assertis a b a is b assertisnot a b a is not b assertisnone x x is none assertisnotnone x x is not none assertin a b a in b assertnotin a b a not in b assertisinstance a b isinstance a b assertnotisinstance a b not isinstance a b assertalmostequal a b round a b 7 0 assertnotalmostequal a b round a b 7 0 aasertgreater a b a gt b assertgreaterequal a b a gt b assertless a b a lt b assertlessequal a b a lt b assertregex s r r search s assertnotregex s r not r search s assertcountequal a b 순서 관계 없이 a b 동일한 요소를 가졌는지 확인 setup 테스트 메서드가 호출되기 직전 각각의 테스트 메서드마다 호출class test unittest testcase def setup self self data 1 2 3 4 5 테스트 메서드 실행 전에 필요한 초기 작업을 수행teardown 테스트 메서드가 실행되고 결과 기록 후 각각의 테스트 메서드마다 호출 setup 이 성공했을 때만 호출 테스트 메서드에서 예외가 발생했더라도 teardown 메서드는 호출class test unittest testcase def teardown self self data none 테스트 실행 후에 사용한 자원을 반환하고 테스트 데이터베이스를 원래 상태로 복원하는 작업setupclass teardownclass 개별 클래스들의 테스트들이 실행되기 전 후 1번만 불리는 클래스 메서드 classmethod 로 데코레이트 해야 한다 테스트 메서드 간의 상태를 공유할 때 사용 classmethoddef setupclass cls classmethoddef teardownclass cls"
      } ,
  
    {
      "title"    : "transaction과 lock",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/transaction-lock",
      "date"     : "2023-05-22 00:00:00 +0000",
      "content"  : "transaction 데이터베이스의 내용을 커밋하거나 롤백할 수 있는 원자 단위 작업 여러 개의 데이터베이스 연산이 하나의 트랜잭션으로 묶이면 여러 사용자가 동시에 접근하여 데이터를 수정해도 일관성과 무결성을 유지할 수 있게 되어 사용한다 데이터베이스에서 일관성을 유지하기 위해 acid 원칙을 따름acid원자성 atomicity 모든 작업이 수행되거나 수행되지 않아야 한다 일관성 consistency 데이터는 트랜잭션이 시작될 때와 끝날 때 일관된 상태로 유지해야 한다 격리성 isolation 트랜잭션이 커밋될 때까지 다른 트랜잭션이 간섭하거나 영향을 미치지 않아야 한다 지속성 durability 트랜잭션이 완료된 후 결과는 영구적으로 저장되어야 한다 시스템 오류가 발생하더라도 데이터가 손실되지 않도록 하고 변경 사항이 유지되어야 한다 무결성 데이터의 유효성을 보장하고 데이터 간의 관계를 지키며 데이터베이스에 설정된 규칙과 제약 조건을 준수하는 것개체 무결성참조 무결성도메인 무결성범위 무결성동시성 제어 무결성lock 데이터베이스에서 동시에 여러 개의 트랜잭션이 동일한 데이터를 접근하려고 할 때 발생하는 충돌을 방지하기 위해 사용되는 동시성 제어 메커니즘 트랜잭션이 데이터를 읽거나 수정할 때 다른 트랜잭션들로부터 데이터에 대한 접근을 제한함으로써 데이터 일관성을 유지 데이터베이스 시스템에서 자동으로 관리되며 트랜잭션이 데이터에 접근할 때 필요한 락을 자동으로 획득하고 해제공유 락 shared lock 공유 락은 여러 트랜잭션이 동시에 데이터를 읽을 수 있지만 쓰기는 허용하지 않음배타적 락 exclusive lock 하나의 트랜잭션이 데이터를 읽고 수정하는 동안 다른 트랜잭션의 접근을 제한exclusive lock을 획득한 트랜잭션은 해당 데이터를 독점하여 접근"
      } ,
  
    {
      "title"    : "MySQL Subquery, View",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/mysql-subquery-view",
      "date"     : "2023-05-15 00:00:00 +0000",
      "content"  : "서브쿼리 sql 문 안에 들어가는 select 문 괄호로 서브 쿼리를 감싸줘야 한다 select 절select select from 테이블where 절select from 테이블where 컬럼 명 equi 또는 non equi 조인 select select amountfrom payment where amount select max amount from payment 여러 로우의 값을 리턴하는 서브 쿼리로도 사용가능하다 select payment id from paymentwhere payment id in select customer id from paymentgroup by customer id having avg amount gt 4 서브 쿼리 결과select customer id avg amount from paymentgroup by customer id having avg amount gt 4from 절select from select as 별칭 서브쿼리로 탄생한 테이블을 derived 테이블이라고 한다 derived 테이블에 alias를 꼭 붙여줘야 한다 derived 파생된서브쿼리에서 사용하는 연산자any some 조건 중 하나라도 만족하면 truewhere 컬럼 명 equi 또는 non equi 조인 any 서브 쿼리 all 모든 조건을 만족해야 truewhere 컬럼 명 equi 또는 non equi 조인 all 서브 쿼리 비상관 서브쿼리 서브쿼리 단독으로도 실행할 수 있는 독립적인 쿼리상관 서브쿼리 외부 쿼리와 상관관계가 있는 서브쿼리 단독으로 실행하지 못하는 쿼리 조인으로도 같은 결과를 얻을 수 있다 직관적인 것을 사용하면 된다 select from paymentwhere exists select from customer where customer id payment customer id select from customer where customer id payment customer id 에서 필요한 payment 테이블이 outer query에 적혀있으므로 단독으로 실행하지 못한다 exists not exists 상관 서브쿼리에서 자주 사용하는 키워드 존재하면 존재하지 않으면where exists 서브쿼리 뷰 조인 서브쿼리 등의 작업을 해서 만든 결과의 가상 테이블 서브쿼리 중첩을 해결할 수 있다 필요한 컬럼이나 특정 로우들을 제외하고 테이블을 만들수 있기 때문에 데이터 보안을 제공한다 create view 뷰 이름 as select create view film v asselect film id title release year from film데이터베이스 파악show databases 테이블의 컬럼 구조describe 테이블명테이블 뷰 파악show full tables in db명"
      } ,
  
    {
      "title"    : "MySQL JOIN",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/mysql-join",
      "date"     : "2023-05-12 00:00:00 +0000",
      "content"  : "join 여러 테이블 합쳐서 하나의 테이블로 보이게 해준다 결합 연산 테이블을 가로 방향으로 합친다 left outer joinselect 테이블1 컬럼 테이블2 컬럼 from 테이블1 left outer join 테이블2on 테이블1 id 테이블2 id 테이블1에 테이블2를 on 조건으로 합친다 조건은 서로 값이 같은 로우끼리 연결 컬럼의 값이 null인 경우 테이블2에 존재하지 않는 로우 총 금액 구하기select customer customer id customer last name sum payment amount from customer left outer join paymenton customer customer id payment customer idgroup by customer customer idright outer join left outer join과 반대 테이블2에 테이블1을 on 조건으로 합친다 full outer join left outer join의 결과와 right outer join 결과를 합친다 select left outer join unionselect right outer join inner join 두 테이블 조건에 일치하는 컬럼 값이 있는 로우들만 합친다 기준 컬럼이 null이 되는 경우는 없다 outer join과 다르게 기준이 되는 테이블이 없다 natural join 테이블에서 같은 이름의 컬럼을 찾아서 자동으로 조건으로 설정하고 inner join을 해준다 from 테이블1 natural join 테이블2 테이블 구조 파악을 위해 natural join보다 inner join으로 on 조건을 걸어주는 게 좋다 cross join 한 테이블의 하나의 row와 다른 테이블의 모든 row를 매칭한다 row끼리의 모든 조합을 보여줌select from 테이블1 cross join 테이블2self join 테이블이 자기 자신과 조인 한 테이블 안에서 서로 연관된 정보를 찾기 위해사용non equi join 등호 는 equi 조인 equality condition 그 외의 부등호와 다른 조건은 non equi 조인집합 연산 테이블을 세로 방향으로 합친다 mysql에서는 버전 8 0 기준으로 union 연산자만 지원하기 때문에 조인을 통해 결과를 얻어야 함 union 합집합 중복을 제거하고 합친다 select from aunionselect from bunion all 중복을 제거하지 않고 겹치는 것을 그대로 보여준다 minus except 차집합 select from a minus 또는 except select from bintersect 교집합 select from aintersect select from b조인의 기준 보통 foreign key를 기준으로 하지만 연관 있는 컬럼을 기준으로 조인을 하기도 한다 테이블 aliasselect테이블1의 별칭 컬럼 테이블2의 별칭 컬럼 from 테이블1 as 별칭 right outer join 테이블2 as 별칭 테이블에 해당하는 컬럼들도 같은 별칭으로 바꿔줘야 한다 on 대신 using 조인 조건으로 쓰인 컬럼 명이 같으면 using을 쓸 수 있다 from 테이블1 inner join 테이블2 using id"
      } ,
  
    {
      "title"    : "MySQL GROUPING",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/mysql-grouping",
      "date"     : "2023-05-11 00:00:00 +0000",
      "content"  : "group by 로우들을 여러 개 그룹으로 나눈다 select from 테이블 group by 컬럼 명select first name count as count from actor group by first name 모든 로우가 컬럼을 기준으로 그룹을 가지게 된다 distinct와 결괏값이 같은 경우가 있는데 distinct는 컬럼의 고윳값을 추출하고 group by는 보이는 컬럼 값 안에 해당하는 로우들이 들어있다 having 생성된 그룹에서 특정 그룹만 필터링해서 보여준다 group by 컬럼 명 having 조건select first name count as count from actor group by first namehaving count first name gt 3 grouping에 사용하지 않은 컬럼을 select 하면 에러가 난다 대신 집계 함수는 사용할 수 있다 집계 함수는 특정 로우를 보여주는 게 아니고 그룹 내의 로우 연산을 하기 때문이다 with rollup 세부 그룹들을 큰 그룹으로 합쳐줌select address gender count from test2group by address gender with rolluporder by address desc 연두색 부분이 부분 총계의 결과 파란색 부분은 기준을 정하지 않은 결과 전체 총계 총 row 수 group by 뒤에 나오는 그루핑의 순서에 맞춰 부분 총계를 보여줌 address가 gender보다 상위 컬럼이기 때문에 이것을 기준으로 롤업을 한다 select gender address count from test2group by gender address with rolluporder by gender desc group by 기준들의 순서에 따라 with rollup의 결과도 달라진다 grouping with rollup을 사용할 때 실제 null을 나타내는 건지 부분 총계를 나타내기 위한 null인지 구분하게 해준다 실제 null을 나타내면 0 부분 총계로 쓰이던 null이면 1로 출력된다 select address gender grouping address grouping gender count from test2group by address gender with rolluporder by address descselect 문 실행 순서적을 때 select from where group by having order by limit실제 흐름 from where group by having select order by limit"
      } ,
  
    {
      "title"    : "MySQL 분석",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/mysql-analysis",
      "date"     : "2023-05-10 00:00:00 +0000",
      "content"  : "nullselect from 테이블 where 컬럼 명 is null 또는 is not null is null과 null은 다르다 null은 아무런 값이 아니기 때문에 어떤 값과 비교할 수 없다 null에 어떠한 연산을 해도 null avg를 통해 평균을 구할 때 null을 제외하고 평균값을 구해준다 null 값 변환select coalesce 컬럼 명 변환할 값 null이 아닌 값이면 그대로 컬럼값으로 null이면 변환 값으로 리턴case 조건에 해당하는 컬럼의 값으로 새로운 컬럼을 생성 조건을 걸 때 a gt 1 and a lt 4를 1 lt a lt 4와 같이 쓰면 안 된다 select case when 조건 then 값 when 조건 then 값 else 값 endfrom 테이블select amount case when amount lt 1 then 1 when amount lt 2 then 2 else 3end as order from paymentconcat 여러 컬럼이나 문자열을 하나의 컬럼으로 만든다 select concat 컬럼 명 1 컬럼 명 2 from 테이블 select concat last name first name as name from actor gt distinct 고윳값만 추출select distinct 컬럼 명 from 테이블substring 문자열 일부를 추출select substring 컬럼 명 시작 문자열 위치 추출 개수 from 테이블lpad rpad 문자열의 왼쪽 또는 오른쪽을 특정 문자열로 채움 컬럼이 int형 일 때 문자열을 넣어주면 자동으로 컬럼 값이 문자열로 형 변환이 된다 lpad 컬럼 명 컬럼의 총 자릿수 채울 문자열 select lpad aa 5 b gt gt gt bbbaa"
      } ,
  
    {
      "title"    : "MySQL 기본",
      "category" : "",
      "tags"     : "",
      "url"      : "/sql/mysql-basic",
      "date"     : "2023-05-08 00:00:00 +0000",
      "content"  : "조건 표현식 같지 않음은 또는 lt gt between a and b a 이상 b 이하 괄호가 연산자 순위가 가장 높기 때문에 여러 조건에서 먼저 실행되길 원하는 조건은 괄호로 씌워주는 습관을 길러라in 일치하는 값이 있는지 확인select film id length title from film where length in 54 86 like 문자열의 첫 부분이 p인 단어로 시작하는 문자열을 가져온다 select actor id first name from actor where first name like p 문자열의 마지막 부분이 p로 끝나는 단어의 문자열을 가져온다 select actor id first name from actor where first name like p p p가 포함된 모든 문자열 like에서 는 한 글자를 나타낸다 date 타입 year month dayselect from member where year birthday 2000 날짜 간의 차이select datediff 날짜 1 날짜 2 날짜 더하기 빼기date add 날짜 interval 1 day date sub 날짜 interval 60 minute unix timestampunix timestamp 날짜 테이블을 지정 다른 db에서 같은 이름의 테이블이 있을 수도 있으니 테이블을 지정해주는 게 좋다 select from db이름 테이블또는use db 이름 select from 테이블대소문자 구분 binary를 붙이면 0과 1로 이루어진 문자열을 정확히 비교하기 때문에 소문자와 대문자를 구별like binary a escape 와 같은 문자들은 표현식에 포함되는 문자들이다 표현식이 아닌 문자로 표현하려면 해당 문자 앞에 를 붙여준다 cast 특정 데이터 타입의 데이터를 일시적으로 다른 데이터 타입으로 변경할 수 있게 해주는 함수 signed 양수와 음수를 포함한 모든 정수를 나타낼 수 있는 데이터 타입cast 데이터 as 바꿀 데이터 타입 limit 현재 조회된 row 중에서 몇 개만 추려서 보여준다 select from actor limit 5 limit 개수 limit 시작 row 개수 row는 0번째부터 시작"
      } ,
  
    {
      "title"    : "TCP",
      "category" : "",
      "tags"     : "",
      "url"      : "/cs/tcp",
      "date"     : "2023-04-28 00:00:00 +0000",
      "content"  : "tcp transmission control protocol 호스트에서 다른 호스트로 보낸 데이터 패킷을 오류나 결함 없이 순서대로 수신하는지 확인하고 안정적인 바이트 스트림 데이터 흐름 서비스를 제공 데이터를 보내기 전에 클라이언트와 서버 간의 연결이 설정된다 서버는 연결이 설정되기 전에 클라이언트의 연결 요청을 수신해야 한다 tcp 연결을 통해 양방향으로 지원되지만 응용 프로그램은 원하는 경우 단방향으로만 데이터를 보낼 수 있다 포트 번호를 사용하여 애플리케이션 서비스를 식별하고 호스트 간에 고유한 흐름을 다중화 혼잡 제어 흐름 제어를 사용한다 tcp 동작 신뢰성 tcp는 전송하는 각 옥텟에 시퀀스 번호를 할당하고 수신 tcp로부터 ack 요구 옥텟 8개의 비트가 한곳에 모인 것 제한 시간 내에 ack를 받지 못하면 데이터를 다시 전송 tcp 재전송 제한 시간 값은 왕복 시간을 기준으로 각 연결에 대해 동적으로 결정 수신기에서 시퀀스 번호는 잘못된 순서로 수신될 수 있는 세그먼트를 올바르게 정렬하고 중복을 제거하는 데 사용 손상은 전송된 각 세그먼트에 체크섬을 추가하여 수신자에서 확인하고 손상된 세그먼트를 버리는 방식으로 처리 흐름제어 빠른 발신자가 느린 수신자를 압도하지 않도록 두 노드 간의 데이터 전송 속도를 관리 tcp는 성공적으로 수신된 마지막 세그먼트를 넘어 허용 가능한 시퀀스 번호의 범위를 나타내기 위해 모든 ack와 함께 window를 반환하여 전송되는 데이터의 양을 관리 수 window 프레임을 저장하는 버퍼 stop and wait 발신자가 한 번에 한 프레임씩 수신자에게 보내고 수신자의 승인을 기다리면서 중지한다 발신자가 승인 ack 을 받으면 다음 데이터 패킷을 수신자에 보내고 다시 기다린다 이러한 프로세스가 계속된다 전송한 프레임 또는 ack가 수신자에게 수신되지 않아 손실된 경우 프레임을 다시 전송한다 arq 장점 단순하다 단점 발신자는 한 번에 한 프레임을 보내고 ack를 기다려야 하므로 비효율적 sliding window 발신자 수신자 사이에 연결을 설정할 때 수신자는 n개의 프레임에 대한 버퍼 공간을 할당한다 프레임을 추적하기 위해 프레임마다 시퀀스 번호가 있다 발신자는 수신자의 버퍼 공간을 확인하고 나서 프레임을 보낸다 이렇게 되면 발신자는 수신자에게 수신 버퍼 공간보다 더 많은 데이터를 보낼 수 없다 시퀀스 번호는 데이터의 순서를 통지하기 위한 것 수신 버퍼가 가득 차면 수신 window의 크기를 0으로 알린다 발신자는 시스템을 일시 중지해야 하며 일시적으로 데이터를 보낼 수가 없다 수신 window에 대해 크기가 0인 경우가 자주 발생하면 데이터 전송 속도가 느려진다 혼잡제어"
      } ,
  
    {
      "title"    : "HTTP",
      "category" : "",
      "tags"     : "",
      "url"      : "/cs/http",
      "date"     : "2023-04-22 00:00:00 +0000",
      "content"  : "http hypertext transfer protocol 웹에서 모든 데이터 교환의 기초가 되는 클라이언트 서버 프로토콜http messages 클라이언트에서 서버의 요청과 응답으로 구성 메시지는 시작 라인 0개 이상의 header 빈 라인 crlf message body 형식으로 받는다 서버는 견고성 실행 중 오류에 대처하고 잘못된 입력을 대처하는 컴퓨터 시스템의 기능 을 위해 비어 있는 모든 것을 무시해야 한다 message headers 헤더 필드는 message value field name field value 로 구성된다 필드 이름은 대소문자 구분을 하지 않는다 필드 이름이 동일한 경우 i e values 로 정의message body 데이터를 저장하는 곳이며 선택 사항 헤더에 모든 데이터를 저장하는 메시지는 body가 필요하지 않음 message body가 있는 경우 요청 또는 응답과 관련된 entity body를 전달하는 데 사용 message body가 허용되는 경우에 대한 규칙은 요청 및 응답에 따라 다르다 요청에 대한 message body가 있다는 것은 요청 message headers에 content length 또는 transfer encoding 헤더 필드가 포함되어 있다는 신호 요청에서 entity body 전송을 허용하지 않는 경우 message body는 요청에 포함되어선 안 된다 서버는 모든 요청에 대해 message body를 읽고 전달해야 한다 request method가 entity body에 대해 정의된 의미를 포함하지 않는 경우 요청을 처리할 때 message body를 무시해야 한다 모든 1xx 204 304 응답은 message body를 포함하면 안 된다 다른 모든 응답에는 message body가 포함될 수 있지만 길이가 0일 수도 있다 content length 클라이언트에게 보낸 message body의 바이트 크기 get delete는 길이가 0이어야 한다 post는 content length가 지정되고 메시지 행의 길이와 일치하지 않으면 메시지는 잘리거나 지정된 길이까지 null로 채워진다 컨텐츠가 없는 경우 값이 0인 경우 에도 항상 http 응답에서 리턴요청 응답 클라이언트가 웹에 http 요청을 보낸다 요청에 응답한다 서버는 요청을 처리하기 위해 애플리케이션을 실행 후 웹에 응답을 반환 클라이언트가 응답 수신 요청 정보 request method uri 프로토콜 버전 요청을 포함하는 mime과 비슷한 메시지응답 정보 메시지의 프로토콜 버전 상태 코드 서버 정보 엔티티를 포함하는 mime과 같은 메시지 메타 정보"
      } ,
  
    {
      "title"    : "asyncio",
      "category" : "",
      "tags"     : "",
      "url"      : "/python/asyncio",
      "date"     : "2023-04-05 00:00:00 +0000",
      "content"  : "asyncio async await 구문을 사용하여 동시성 코드를 작성하는 라이브러리 coroutine들을 동시에 실행하고 제어할 수 있다 coroutine subroutine의 일반화된 형태 subroutine과 달리 실행을 중지하고 여러 다른 지점에서 진입 탈출하거나 실행을 재개할 수 있다 async def문으로 구현subroutine 코드의 다른 부분에서 호출할 수 있는 코드 블록 파이썬에서는 함수와 클래스를 뜻하지만 파이썬엔 어울리지 않는 용어 참고await awaitable에서 coroutine의 실행을 일시 중지한다 coroutine 함수에서만 사용awaitable await 표현식에 사용할 수 있거나 await 메서드를 가진 객체 awaitable 객체에는 coroutine task future의 세 가지 유형이 있다 taskfutureasyncio create task 코루틴을 동시에 실행import asyncioasync def a await asyncio sleep 1 print hello async def b await asyncio sleep 2 print world async def main print f started at time strftime x await a await b print f finished at time strftime x asyncio run main gt gt gt started at 11 15 47helloworldfinished at 11 15 50async def main task1 asyncio create task a task2 asyncio create task b await task1 await task2 gt gt gt started at 11 16 03helloworldfinished at 11 16 051번 코드는 a 에서 1초 b 에서 2초를 기다리고 실행하여 총 3초의 시간이 걸렸지만 2번 코드는 a 와 b 가 동시에 실행되어 총 2초가 걸리게 됨coroutine vs thread"
      } ,
  
    {
      "title"    : "DRF Request, Response",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/request-response",
      "date"     : "2023-03-12 00:00:00 +0000",
      "content"  : "api view drf에서 django의 httprequest httpresponse 대신 request response로 요청 처리 django의 view 클래스를 상속받음request api view get post def snippet list request if request method post serializer snippetserializer data request data if serializer is valid serializer save return response serializer data status status http 201 created post 요청은 request 객체에 담겨서 전달 된다 json 형태로 들어온 데이터를 파싱하여 파이썬 딕셔너리로 변환 변환된 데이터는 시리얼라이저를 통해 파이썬 객체 형태로 변경response api view get post def snippet list request if request method get snippets snippet objects all serializer snippetserializer snippets many true return response serializer data status status http 200 ok get 요청이 들어오면 조회한 값이 serializer 변수에 담김 시리얼라이저는 파이썬 객체 형태로 저장된 데이터를 파이썬 딕셔너리로 변환 파이썬 딕셔너리가 응답으로 전달될 때에는 json 형태로 다시 변환"
      } ,
  
    {
      "title"    : "클래스형 뷰 - 수정, 삭제",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/class-based-view-put-patch-delete",
      "date"     : "2023-03-12 00:00:00 +0000",
      "content"  : "수정 삭제class snippetdetail apiview 객체 가져오기 def get object self pk snippet get object or 404 snippet pk pk return snippet def get self request pk snippet self get object pk serializer snippetserializer snippet return response serializer data def patch self request pk snippet self get object pk serializer snippetserializer snippet data requset data partial true if serializer is valid raise exception true serializer save return response serializer data status status http 200 ok return response serializer errors status status http 400 bad request def delete self request pk snippet self get object pk snippet delete return response status status http 204 no content is valid raise exception true serializer 데이터에 에러가 있는 경우 serializers validationerror 예외를 발생 예외는 rest framework에서 제공하는 예외 처리기에 의해 자동으로 처리 기본 값은 400 에러"
      } ,
  
    {
      "title"    : "클래스형 뷰 - 조회, 생성",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/class-based-view-get-post",
      "date"     : "2023-03-12 00:00:00 +0000",
      "content"  : "조회 생성from rest framework views import apiview class snippetlist apiview def get self request snippets snippet objects all serializer snippetserializer snippets many true return response serializer data def post self request serializer snippetserializer data request data if serializer is valid raise exception true serializer save return response serializer data status status http 201 created return response serializer errors status status http 400 bad request 클래스에 함수를 추가 했기 때문에 self 파라미터를 받음 status의 기본 값은 200이기 때문에 get함수에서 status 값을 지움urlpatterns path snippets snippetlist as view urls py에선 view를 호출"
      } ,
  
    {
      "title"    : "serializer relations",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/serializer-relations",
      "date"     : "2023-03-10 00:00:00 +0000",
      "content"  : "관계 직렬화class track models model album models foreignkey album on delete models cascade class trackserializer serializers modelserializer class meta model track fields all extra kwargs album read only true id를 url로 받아오기 때문에 read only api view get post def track list request pk album get object or 404 track pk pk 조회할 모델 조회할 pk if request method get album을 가져오기 위해 track으로 filter tracks track objects filter album album serializer trackserializer tracks many true return response serializer data status status http 200 ok elif request method post serializer trackserializer data request data if serializer is valid 시리얼라이저가 create 함수의 validated data에 album을 넘겨줌 serializer save album album return response serialeizr data status status http 201 created return response serializer errors status status http 400 bad request 역관계 직렬화class track models model album models foreignkey track on delete models cascade related name tracks related name 역관계 이름 설정 class albumserializer serializers modelserializer class meta model album fields id name tracks read only fields tracks 역관계를 쉽게 사용할 수 있게 설정primarykeyrelatedfield 역관계의 이름과 다른 이름으로 사용 modelserializer로 관계를 표현할 경우 기본 값으로 사용된다 class albumserializer serializers modelserializer album tracks serializers primarykeyrelatedfield source tracks many true read only true source 참조할 값을 정의하는 옵션 class meta model album fields id name album tracks stringrelatedfield drf에서 관계 직렬화 할 때 객체의 str 메소드가 사용되도록 설정class track models model def str self return self nameclass albumserializer serializers modelserializer tracks serializers stringrelatedfield many true 조회만 가능한 필드이기 때문에 read only를 추가하지 않아도 됨q class meta model album fields id name tracks nested serializer 관련된 객체의 모든 필드를 직렬화 할 때 사용 참조하는 serializer가 위에 있어야 함class albumserializer serializers modelserializer class trackserializer serializers modelserializer album albumserializer read only true class meta model track fields id name album"
      } ,
  
    {
      "title"    : "Django Channels",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/channels",
      "date"     : "2023-03-08 00:00:00 +0000",
      "content"  : "channels django를 사용하여 websocket을 처리 하는 asgi 기반의 프로젝트 websocket 연결이 들어오면 channels는 routing py를 참조하여 consumer를 찾고 연결 이벤트를 처리websocket 브라우저와 서버 사이에서 tcp 연결을 통해 전이중 통신 채널을 제공하는 컴퓨터 통신 프로토콜wsgi web server gateway interface 웹 서버가 python 웹 응용 프로그램 프레임워크 사이에서 통신 요청을 처리하기 위한 표준 동기만 처리한다 long polling http websocket 연결과 같이 오래 지속되는 연결을 허용하지 않음 wsgi 지원 서버asgi asynchronous server gateway interface wsgi의 하위 호환성과 비동기 및 동기 앱 모두 처리 wsgi는 websocket과 같은 복잡한 웹 프로토콜에 적합하지 않음consumers 연결 메시지 수신 전송 작업 처리를 하는 역할 요청이나 새 소켓이 생성되면 채널의 라우팅 테이블을 찾아감 작은 app이라고 생각하면 된다 기본적으로 connect receive send disconnect의 핸들링으로 구성되어 있기 때문에 메서드가 없는 경우에도 기본 동작을 한다 메서드를 직접 작성한다면 해당 동작이 실행되고 나서 작성된 코드를 실행한다 scope consumer와 관련된 세부 정보를 가지고 있음 path headers session cookies 등 type websocket path ws sml trade raw path b ws sml trade headers routing 클라이언트의 요청을 consumer로 연결 urlrouter를 사용하여 구성urlrouter 라우터 클래스 중 하나로 routing py에 있는 url 패턴으로 consumer 클래스에 연결해준다 websocket urlpatterns re path r ws p lt sml trade gt w consumers smltradeconsumer as asgi as asgi 는 해당 클래스를 asgi 애플리케이션으로 변환하는 메서드 asgi로 변환해야 웹 소켓 연결을 처리할 수 있다 channel layers 다수의 서버로 확장된 웹 애플리케이션의 각 서버가 독립적으로 동작하고 channels의 이벤트를 서로 교환하고 처리할 수 있다 channels와 redis를 사용할 때 channels redis를 사용하는 것이 공식적으로 지원된다 비동기 처리 지원 다양한 통신 프로토콜과 상호작용message broker 분산된 시스템 응용 프로그램 및 서비스가 서로 통신하고 정보를 교환할 수 있도록 하는 소프트웨어 작업을 메시지로 전달 worker가 메시지를 수신하여 처리하도록 함 redis rabbitmq activemq kafka 등message queue 메시지를 저장하고 관리하는 대기열내가 이해한 channels의 흐름 1 사용자가 웹소켓을 통해 입력 메시지를 전송한다 2 연결된 웹소켓의 routing을 찾는다 3 routing에 해당하는 컨슈머를 찾는다 4 해당 컨슈머 동작 5 컨슈머가 message broker에게 메시지 전송 6 message broker를 통해 메시지를 작업 큐에 전송 7 message broker가 작업 큐에서 메시지를 가져온다 8 가져온 메시지를 message broker 통해 컨슈머에게 전송 9 해당 컨슈머 작업 후 웹소켓으로 입력 메시지 전송"
      } ,
  
    {
      "title"    : "ModelSerializer",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/modelserializer",
      "date"     : "2023-03-04 00:00:00 +0000",
      "content"  : "modelserializerclass accountserializer serializers modelserializer class meta model account fields id account name users created create 와 update 의 함수를 직접 정의하지 않고 간단하게 구현이 가능하다 meta모든 필드 적용시fields all read only 지정read only fields account name autofield는 자동으로 read only로 설정된다 필드 제외exclude users fields나 exclude중 하나를 필수로 사용해야 한다 필드 추가extra kwargs password write only true"
      } ,
  
    {
      "title"    : "serializer - 수정, 삭제",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/put-patch-delete",
      "date"     : "2023-03-02 00:00:00 +0000",
      "content"  : "put patchput 모든 필드에 대한 수정patch 수정할 필드에 대한 값만 전달serializer 수정 삭제 urls py django처럼 url로 pk를 받아온다 urlpatterns path snippet lt int pk gt snippet list views pyfrom rest framework generics import get object or 404 api view get patch delete def snippet detail request pk snippet get object or 404 snippet pk pk if request method get serializer snippetserializer snippet return response serializer data status status http 200 ok if request method patch serializer snippetserializer snippets data request data partial true if serializer is valid serializer save return response serializer data status status http 200 ok return response serializer errors status status http 400 bad request elif request method delete serializer delete return response status status http 204 no content partial patch를 사용할 때 필요한 옵션 serializers pyclass snippetserializer serializers serializer instance는 수정할 데이터 def update self instance validated data instance email validated data get email instance email instance content validated data get content instance content instance created validated data get created instance created instance save return instanceget 딕셔너리 타입 key와 기본 값을 받고 key에 맞는 validated data에 값이 존재하면 수정 요청한 값 없으면 기존 필드 값으로 수정 save 새 인스턴스를 생성하거나 기존 인스턴스를 수정"
      } ,
  
    {
      "title"    : "Connection refused",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/connection-refused",
      "date"     : "2023-03-02 00:00:00 +0000",
      "content"  : "문제회원가입 후 리다이렉트가 생기지 않고 connectionrefusederror at signup 에러가 생겼다 file home minjin pyenv versions market envs lib python3 7 site packages allauth account adapter py line 549 in send confirmation mail self send mail email template emailconfirmation email address email ctx file home minjin pyenv versions market envs lib python3 7 site packages allauth account adapter py line 140 in send mail msg send file home minjin pyenv versions market envs lib python3 7 site packages django core mail message py line 284 in send return self get connection fail silently send messages self file home minjin pyenv versions market envs lib python3 7 site packages django core mail backends smtp py line 102 in send messages new conn created self open file home minjin pyenv versions market envs lib python3 7 site packages django core mail backends smtp py line 62 in open self connection self connection class self host self port connection params 터미널을 보니 회원가입 시 메일로 인증을 보내는 부분에서 문제가 생긴 것 같았다 원인이메일 세팅을 주석 처리하고 이메일을 smtp 서버로 보냈기 때문email backend django core mail backends smtp emailbackend 해결 방법email backend 세팅을 smtp가 아닌 console로 바꾸면 된다 console 값이 기본값이기 때문에 지워도 된다"
      } ,
  
    {
      "title"    : "serializer - 조회, 생성",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/get-post",
      "date"     : "2023-02-25 00:00:00 +0000",
      "content"  : "serializer 생성 앱 안에 serializers py 생성from rest framework import serializersfrom models import snippetclass snippetserializer serializers serializer 필드 이름은 모델에서 사용하는 필드 이름과 일치시켜야 함 id serializers integerfield read only true read only 생성과 수정이 제한 title serializers charfield snippetserializer 필드에 해당하는 데이터가 딕셔너리 형태로 전달 def create self validated data validated data는 유효성 검사를 마친 데이터 return snippet objects create validated data views py api view get post get post 메소드만 허용def snippet list request if request method get snippets snippet objects all serializer snippetserializer snippets many true many 여러 데이터를 직렬화할 때 파이썬 객체가 딕셔너리 형태로 변경 변환된 데이터는 serializer data로 접근 return response serializer data status status http 200 ok json 형태로 변경 elif request method post serializer snippetserializer data request data if serializer is valid 데이터 유효성 검사 serializer save snippetserializer의 create 함수가 실행 되어 객체 생성 return response serializer data status status http 201 created return response serializer errors status status http 400 bad request response vs jsonresponseresponse rest framework에서 제공하는 응답 클래스 객체를 넘겨주기 전 데이터를 직렬화해야 한다 json 형태로 바뀌면서 응답을 반환jsonreponse django http의 클래스 httpresponse의 하위 클래스 매개변수 safe가 false일 경우 모든 데이터의 유형을 직렬화 할 수 있다 json 형태로 return"
      } ,
  
    {
      "title"    : "DRF 개발 환경 구성",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/install",
      "date"     : "2023-02-21 00:00:00 +0000",
      "content"  : "pyenv 설치가상환경 생성 pyenv virtualenv 파이썬 버전 가상 환경 이름 디렉토리 생성 후 이동가상환경 적용 pyenv local 가상 환경 이름 django 버전과 맞는 drf 버전 설치 pip install django 4 0 djangorestframework 3 13 1django 프로젝트 생성 django admin startproject 프로젝트명 settings py gt installed apps에 rest framework 추가앱 생성 installed apps에 추가"
      } ,
  
    {
      "title"    : "Django REST Framework",
      "category" : "",
      "tags"     : "",
      "url"      : "/drf/Django-REST-Framework",
      "date"     : "2023-02-20 00:00:00 +0000",
      "content"  : "drf django rest framework 풀스택 프레임워크인 django와 달리 drf는 django를 백엔드 개발에만 사용하게 해준다 직렬화 django에서 백엔드의 데이터는 파이썬 객체로 사용하고 프론트엔드에서는 json으로 사용한다 서로 통신하기 위해 데이터 형식을 통일하는 것을 drf가 해준다 직렬화는 파이썬 객체로 저장된 데이터를 json으로 역직렬화는 json 형태의 데이터를 파이썬 객체로 바꿔주는 것이다 rest representational state transfer api를 만들 때 따라야 하는 소프트웨어 아키텍처 아키텍처 스타일의 원칙은 균일한 인터페이스 무상태 계층화 시스템 캐시 가능성 온디맨드 코드 클라이언트 서버로 구성되어 있다 rest url 규칙 마지막 부분에 슬래시를 사용하면 안된다 언더바 대신 하이픈을 사용 소문자 사용 확장자를 사용하면 안된다 crud에 대한 행위를 포함시키면 안된다 api application programming interface 다른 소프트웨어 시스템과 통신하는 방법을 정의한다"
      } ,
  
    {
      "title"    : "template extends",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/template-extends",
      "date"     : "2023-02-01 00:00:00 +0000",
      "content"  : "부모 템플릿 load static lt doctype html gt lt html gt lt head gt lt meta charset utf 8 gt lt title gt lt title gt lt head gt lt body gt block 이름 endblock 이름 lt body gt lt html gt 자식 템플릿에서 상속 extends base html load static block 이름 lt div gt lt div gt endblock 이름 extends는 첫 줄에"
      } ,
  
    {
      "title"    : "HttpRequest objects",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/HttpRequest",
      "date"     : "2023-01-18 00:00:00 +0000",
      "content"  : "httprequest objects 여러가지가 있는데 사용한 것만 기록httprequest methodif request method get do something elif request method post do something else get post는 대문자로httprequest metahttprequest meta http referer http referer 참조 페이지"
      } ,
  
    {
      "title"    : "get_or_create",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/get_or_create",
      "date"     : "2023-01-17 00:00:00 +0000",
      "content"  : "get or create obj created person objects get or create first name john last name lennon defaults birthday date 1940 10 9 조건에 맞는 오브젝트가 있으면 obj 저장 created는 bool로 튜플 반환 obj created update or create 도 있다"
      } ,
  
    {
      "title"    : "관계 CRUD",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/relationships-CRUD",
      "date"     : "2023-01-15 00:00:00 +0000",
      "content"  : "foreignkey onetoonefield create object를 넘겨도 되고 object id를 넘겨도 된다 object id 1 genericforeignkey create content type id로 전달하거나 content object로 전달 content object로 전달할 때 id만 넘겨주면 contenttype을 파악할 수 없어 오류가 발생하니 오브젝트를 넘겨줘야한다 manytomanyfield create deleteobject field add object field remove object나 object id로 전달 없는 파라미터는 전달되어도 무시 역관계에서도 가능updateobejct field valueobject save 값을 수정후 save"
      } ,
  
    {
      "title"    : "lookups",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/lookups",
      "date"     : "2023-01-14 00:00:00 +0000",
      "content"  : "field lookupsentry objects filter field lookuptype value lookup type in gt id gt 4 gt 4보다 큰 id gte 크거나 같음 lt 미만 lte 작거나 같음 range field range start end contains 대소문자를 구분하여 비교 startswith 문자열의 시작 endswith 문자열의 끝 i를 붙이게 될경우 대소문자 구분을 하지 않고 비교한다 gt icontains istartswith iendswith 이외에도 여러 연산자가 있으니 필요시 확인 관계에 대한 조회 더블 언더바로 원하는 관계까지 접근하여 필터 가능역관계 조회 genericforeignkey는 여러 모델에서 가리키기 때문에 기존의 방법으로는 필터가 불가능하다 content type과 object id로 필터가 가능하다 genericrelation을 활용하면 간단하게 필터가 가능 related query name 역관계에 접근할 때는 content object로 접근content object genericforeignkey"
      } ,
  
    {
      "title"    : "Manager, 역관계",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/manager",
      "date"     : "2023-01-13 00:00:00 +0000",
      "content"  : "manager 데이터베이스 쿼리 작업과 모델이 연결되는 인터페이스 장고는 모든 모델에 objects라는 이름을 가진 manager가 있다 gt 모델명 objects manager는 쿼리셋이 아니기 때문에 all 과 같은메서드를 통해 쿼리셋으로 변경하여 사용한다 basemanager의 from queryset을 상속받아 사용 from queryset은 queryset class 를 리턴역관계 외래키로 필드를 만들면 모델명 set으로 접근 가능 역관계도 manger이기 때문에 쿼리셋으로 변경하여 사용일대일 역관계 실제 object를 가리키기 때문에 오브젝트 필드로 접근 가능다대다 역관계 오브젝트 오브젝트 set manger 형태이기 때문에 메서드를 붙여서 사용genericforiegnkey 역관계from django contrib contenttypes fields import genericrelationclass test models model obj genericrelation 클래스명 genericforiegnkey를 사용한 클래스가 선언이 되지 않았을 땐 문자열로 그게 아니라면 클래스로 위와 같은 역관계 구현시 cascade 관계가 됨역관계 이름 바꾸기obj models key related name 변경할 이름 역관계가 필요 없을 때obj models key related name"
      } ,
  
    {
      "title"    : "InlineModelAdmin",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/inline-model-admin",
      "date"     : "2023-01-11 00:00:00 +0000",
      "content"  : "inlinemodeladmin 어드민 사이트에서 모델과 상위 모델을 같은 페이지에서 편집할 수 있는 기능을 inline이라고 한다 from django db import modelsclass author models model name models charfield max length 100 class book models model author models foreignkey author on delete models cascade title models charfield max length 100 from django contrib import adminclass bookinline admin tabularinline model bookclass authoradmin admin modeladmin inlines bookinline authoradmin에서 bookinline 사용inlinemodeladmin은 두 가지 하위 클래스를 제공하는데 차이점은 렌더링 된 템플릿의 모습 tabularinline stackedinlinegenericforiegnkey로 관계를 형성했을 때 genericstackedinline 또는 generictabularinline을 사용해야 한다 다대다 관계로 형성했을 때from django db import modelsclass person models model name models charfield max length 128 class group models model name models charfield max length 128 members models manytomanyfield person related name groups from django contrib import adminclass membershipinline admin tabularinline model group members throughclass personadmin admin modeladmin inlines membershipinline class groupadmin admin modeladmin inlines membershipinline exclude members admin site register person personadmin admin site register group groupadmin exclude fk name을 정의해야 할 때 동일한 모델을 가리키는 외래 키가 두 개 이상 있을 때 self 관계일 때useradmin 클래스에 inlines 추가하기useradmin inlines inline 클래스 튜플 형식에서 요소가 하나만 있을 경우에는 를 꼭 붙여야 한다"
      } ,
  
    {
      "title"    : "Model Meta options",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/model-meta",
      "date"     : "2023-01-10 00:00:00 +0000",
      "content"  : "model meta options 모델에서 사용 가능한 meta optionsdb table 데이터베이스 테이블 이름class meta db table music album orderingclass meta ordering order date 를 붙이면 내림차순class meta ordering a b a를 내림차순으로 정렬 후 b를 오름차순으로unique togetherclass meta unique together driver restaurant 여러 필드를 조합하여 중복이 되면 안될 때 사용driver restaurant은 예시 필드"
      } ,
  
    {
      "title"    : "Contenttypes",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/contenttypes",
      "date"     : "2023-01-10 00:00:00 +0000",
      "content"  : "contenttypes 하나의 모델을 여러 모델과 연결할 수 있다 중복으로 관계를 맺는 모델이 있을 때 사용generic relationsfrom django contrib contenttypes fields import genericforeignkeyfrom django contrib contenttypes models import contenttypefrom django db import modelsclass taggeditem models model tag models slugfield content type models foreignkey contenttype on delete models cascade 1 object id models positiveintegerfield 2 content object genericforeignkey content type object id 3 def str self return self tag 3 genericforeignkey에 들어가는 파라미터들을 content type object id 로 정의하면아래와 같이 생략할 수 있다 content object genericforeignkey 3content type id 템플릿으로 전달 views pyfrom django contrib contenttypes models import contenttypedef get context data self kwargs contenttype objects get model 모델명 return context"
      } ,
  
    {
      "title"    : "One-To-One Field",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/OneToOne",
      "date"     : "2022-12-23 00:00:00 +0000",
      "content"  : "one to one field 모델의 일대일 관계 형성 관계를 형성할 model의 인스턴스가 저장되어 있어야 함 related name을 정하지 않으면 현재 모델의 소문자를 기본 값으로 사용from django conf import settingsfrom django db import modelsclass myspecialuser models model user models onetoonefield settings auth user model on delete models cascade supervisor models onetoonefield settings auth user model on delete models cascade related name supervisor of"
      } ,
  
    {
      "title"    : "Many-To-Many Field",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/ManyToMany",
      "date"     : "2022-12-23 00:00:00 +0000",
      "content"  : "many to many field 일대일 관계와 달리 두 모델 중 아무거나 선택해도 상관없다 참조하는 오브젝트가 여러 개이기 때문에 on delete 옵션이 없다 argument manytomanyfield symmetricalfrom django db import modelsclass person models model friends models manytomanyfield self symmetrical false 다대다 관계는 a와 b b와 a가 서로 대칭관계이다 대칭관계를 원하지 않는다면 symmetrical를 false로 하여 비대칭 관계로 만든다 self를 쓰는 이유 user로 예를 들면 유저 a는 다른 유저들을 팔로우할 수 있고 다른 유저들도 a를 팔로우할 수 있다 user끼리 참조하기 때문에 사용한다 일대일 외래키도 사용 가능하다"
      } ,
  
    {
      "title"    : "Data Migrations",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/data-migration",
      "date"     : "2022-10-25 00:00:00 +0000",
      "content"  : "data migrations 새로운 컬럼을 만들 때 데이터도 넣어준다 테이블 여러 개 나누거나 합칠 때도 사용 방법비어있는 마이그레이션 파일을 만든다 python manage py makemigrations empty yourappnamefrom django db import migrationsclass migration migrations migration dependencies yourappname 0001 initial operations 마이그레이션 함수는 apps과 schema editor를 파라미터로 받는다 from django db import migrationsdef combine names apps schema editor we can t import the person model directly as it may be a newer version than this migration expects we use the historical version person apps get model yourappname person 모델은 이 형식으로 가져와야 함 for person in person objects all person name s s person first name person last name person save class migration migrations migration dependencies yourappname 0001 initial operations migrations runpython combine names 이후 migrate를 하면 data migration이 적용된다 되돌리기아무런 작업을 하지 않길 원하면 runpython noop 메서드를 전달operations migrations runpython comb migrations runpython noop"
      } ,
  
    {
      "title"    : "migration fake",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/migration-fake",
      "date"     : "2022-09-21 00:00:00 +0000",
      "content"  : "문제migrate를 했음에도 no migrations to apply 가 뜨고 테이블이 생기지 않았다 init py 파일을 제외하고 migration migrate를 실행해도 생기지 않았다 원인예전 model로 만들어진 테이블이 이미 있는 경우 생기는 문제 같다 해결 방법 python manage py migrate fake appname zerostackoverflow django docs"
      } ,
  
    {
      "title"    : "Mixin",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/mixin",
      "date"     : "2022-06-23 00:00:00 +0000",
      "content"  : "mixin파이썬에서 사용하는 툴django contrib auth접근 제어에 관련된 mixin 패키지가 존재하지만 커스터마이징 어려움django braces access mixins 접근 제어에 관련 form mixins form이 처리되는 방식을 수정 other mixins json ajax context 등loginrequiredmixinpip install django bracessettings에 가서 login url account login gt 로그인이 안 되어있을 때 로그인 페이지로 redirectfrom django views generic import templateviewfrom braces views import loginrequiredmixinclass somesecretview loginrequiredmixin templateview template name path to template html optional login url signup redirect field name hollaback raise exception true def get self request return self render to response 주의request가 view에 도착하기 전에 mixin 로직을 거치기 때문에 loginrequiredmixin을 파라미터 첫 번째 값으로 써야 함 결과http 127 0 0 1 8000 login next posts new url을 보면 next 뒤에 파라미터가 있다 로그인을 성공하면 next 파라미터의 url로 redirect 됨userpassestestmixin 유저가 mixin을 통과하지 못할 때 흐름을 제어from django views generic import templateviewfrom braces views import userpassestestmixinclass someuserpassview userpassestestmixin templateview redirect unauthenticated users true raise exception functions에서 만든 함수 인증 페이지 redirect def test func self user return emailaddress objects filter user user verified true exists redirect unauthenticated users bool view 접근이 차단 된 유저를 로그인 유무에 따라 다르게 처리true 로그인이 안 된 유저는 로그인 페이지로 redirect 로그인 된 유저는 exceptionfalse 로그인 유무 상관없이 exceptionfunctions redirect할 함수from django shortcuts import redirectfrom allauth account utils import send email confirmationdef test self request send email confirmation request request user return redirect 이메일 인증 요청 url allauth send email confirmation이메일 인증을 하지 않은 유저는 이메일 인증 발송을 해줌 redirect 프로젝트 url에서 요청 템플릿으로 아래와 같이 리턴 path 지정해줘야 함"
      } ,
  
    {
      "title"    : "render, redirect, reverse",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/render-redirect-reverse",
      "date"     : "2022-06-21 00:00:00 +0000",
      "content"  : "헷갈려서 작성했다 renderhttpresponse 렌더링 된 텍스트와 함께 객체를 반환render request template name context none content type none status none using none 필수 파라미터 request template nameredirectredirect to args permanent false kwargs to에 이동할 url을 적어주면 된다 reversereverse viewname urlconf none args none kwargs none current app none url 템플릿 태그 아래 와 비슷하게 동작path archive views archive name news archive view에서 생성된 object의 id를 post id로 url에 넘겨준다 return reverse post detail kwargs post id self object id"
      } ,
  
    {
      "title"    : "thymeleaf pagination",
      "category" : "",
      "tags"     : "",
      "url"      : "/spring/thymeleaf-pagination",
      "date"     : "2022-06-14 00:00:00 +0000",
      "content"  : "thymeleaf에서 페이징을 구현하는데 다음과 같은 오류가 떴다 th with start t math floor gt gt gt el1005e type cannot be found math버전이 업데이트 되면서 클래스를 호출하는 방법이 바뀌었다 https github com thymeleaf thymeleaf issues 872https github com thymeleaf thymeleaf issues 873https github com thymeleaf thymeleaf issues 878아래와 같은 방법으로 작성해야 한다 th with start t java lang math floor 현재는 페이징 로직을 view에서 처리했지만 좋지 않은 방법이라고 한다 필요한 로직은 controller에서 처리 후 view로 넘겨주는 방법으로 사용해야한다"
      } ,
  
    {
      "title"    : "humanize",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/humanize",
      "date"     : "2022-06-09 00:00:00 +0000",
      "content"  : "숫자 렌더링installed apps에 django contrib humanize 추가 load humanize 30000 intcomma gt gt gt 30 000filter apnumber intcomma intword naturalday naturaltime ordinal"
      } ,
  
    {
      "title"    : "push 반영이 안될 때",
      "category" : "",
      "tags"     : "",
      "url"      : "/blog/push-error",
      "date"     : "2022-05-10 00:00:00 +0000",
      "content"  : "push를 해도 블로그에 올라오지 않았다 해결방법config yml 하단에 future true 추가"
      } ,
  
    {
      "title"    : "Could not resolve host: github.com",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/host-error",
      "date"     : "2022-04-21 00:00:00 +0000",
      "content"  : "git push가 되지 않고 다음과 같은 오류가 떴다 fatal unable to access https github com lmj00 django project git could not resolve host github com해결 방법 sudo vim etc resolv conf입력 후에 nameserver 기본 게이트웨이"
      } ,
  
    {
      "title"    : "Ajax",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Ajax",
      "date"     : "2022-04-21 00:00:00 +0000",
      "content"  : "ajaxdjango는 ajax post 요청을 할 때 csrf 토큰을 전달 해야한다 cross site request forgery protection"
      } ,
  
    {
      "title"    : "migration 오류",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/migration-error",
      "date"     : "2022-03-22 00:00:00 +0000",
      "content"  : "app 구조를 변경하다가 migate 과정에서 오류가 발생했다 find path migrations py not name init py delete find path migrations pyc delete이후 dbsqlite3 삭제이전의 앱 파일이나 프로젝트의 설정을 그대로 가져오면 오류가 나기 때문에 migrate가 진행된 후 적용시켜야 한다"
      } ,
  
    {
      "title"    : "stash",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/stash",
      "date"     : "2022-03-09 00:00:00 +0000",
      "content"  : "stash 워킹 디렉토리에서 작업하던 내용을 stack에 보관한다 git stash stack에 보관이 잘 되었는지 확인git stash liststack에 보관했던 내용 불러오기git stash apply왜 사용하는가 브랜치에서 작업을 하다가 다른 브랜치로 가야 하는 상황으로 옮겨야 할 때 사용한다 커밋을 하게 되면 필요 없는 커밋을 만들게 되기 때문에 stash를 사용한다"
      } ,
  
    {
      "title"    : "rebase",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/rebase",
      "date"     : "2022-03-09 00:00:00 +0000",
      "content"  : "rebase 현재 브랜치의 베이스를 대상 브랜치로 재지정 git rebase 대상 브랜치 conflict 해결 후 git add git rebase continue 사용 이유 merge와 결과는 같다 커밋 히스토리를 깔끔하게 하고 싶을 때 사용 세세한 커밋 히스토리를 담고 싶을 땐 merge 사용특정 커밋 제외하기 git rebase i head 4 i gt 인터랙티브 커밋 커밋 히스토리 변경 head 4 gt head 기준으로 4개의 커밋 목록을 가져온다 예시해당 커밋에서 b c라는 커밋을 제외하고 싶다면drop으로 변경한 뒤 저장하고 pushrebase 중 conflict가 발생하면 해당 파일을 열어 conflict 해결 후 add 후 커밋 메시지 작성 git rebase continue 모든 conflict를 해결하면 push continue는 충돌이 발생한 다음 커밋으로 이동결과아래와 같이 a d 커밋만 남게되었다 reabse 시작 전으로 돌아가기 git rebase abort 작성중"
      } ,
  
    {
      "title"    : "all, graph",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/all-graph",
      "date"     : "2022-03-07 00:00:00 +0000",
      "content"  : "all 현재 있는 브랜치와 다른 브랜치의 커밋 히스토리를 보려면 git log pretty oneline all graph 커밋 히스토리를 그래프로 출력 git log pretty oneline all graph 은 하나의 커밋 선이 합쳐지는 부분은 merge 커밋"
      } ,
  
    {
      "title"    : "revert",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/revert",
      "date"     : "2022-01-13 00:00:00 +0000",
      "content"  : "revert git revert 커밋 해시 실행하면 커밋 메시지 창이 뜬다 해당 커밋 이전으로 되돌릴 수 있다 push를 하면 이전 커밋으로 되돌아간다 왜 reset을 사용하면 안되는가 local repository에서 reset을 하게 되면 remote repository가 더 최신 커밋이기 때문에 git pull을 해야된다 revert를 사용하게 되면 local repository에서 이후의 커밋이 생기기 때문에 push가 가능하다 여러 커밋 revert git revert 커밋 해시 1 커밋 해시 2 1번 커밋은 포함되지 않는다"
      } ,
  
    {
      "title"    : "reflog",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/reflog",
      "date"     : "2022-01-13 00:00:00 +0000",
      "content"  : "reset reset을 해도 그 이후의 커밋들은 삭제 되지 않는다 head가 가리키던 branch가 해당 커밋을 가리키는 것이다 reflog 커밋 해시를 모를 경우 사용 reset 했을 경우 head가 가리켜왔던 커밋들을 기록한 정보 자세히 보려면 git log g git reflog72d0a38 head gt master origin master head 0 reset moving to 72d02f23150 head 1 reset moving to 2f2372d0a38 head gt master origin master head 2 revert revert add the info of calculator py in readme md c142ae6 head 3 revert revert add the info of calculator py in readme md 8a1b22b head 4 revert revert update readme md git reset hard 2f23git reset hard head 1 서로 같은 의미"
      } ,
  
    {
      "title"    : "fetch",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/fetch",
      "date"     : "2022-01-12 00:00:00 +0000",
      "content"  : "fetch merge를 하지 않고 remote repository를 가져오기만 한다 remote repository에 있는 내용을 점검 해야할 때 사용 remote repository branch와 작성한 코드를 검토 확인 후 직접 merge를 해줘야 한다 branch 비교 git diff 로컬 리모트"
      } ,
  
    {
      "title"    : "blame",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/blame",
      "date"     : "2022-01-12 00:00:00 +0000",
      "content"  : "blame 어떤 파일에서 문제를 일으킨 코드를 누가 작성했는지 찾기 위한 커맨드 blame 을 탓하다 책임 git blame 대상 0b17837b mj 2020 09 03 04 52 24 0900 1 기본 계산기 2f23150 mj 2020 09 03 04 06 53 0900 2 def add a b 2f23150 mj 2020 09 03 04 06 53 0900 3 return a b 2f23150 mj 2020 09 03 04 06 53 0900 4 커밋에 대한 내용 git show 커밋 해시 커밋은 항상 신중하게 해야겠다"
      } ,
  
    {
      "title"    : "merge의 종류",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/merge-types",
      "date"     : "2022-01-10 00:00:00 +0000",
      "content"  : "fast forward merge 커밋 히스토리에서 같은 line에 있는 branch를 merge 새로운 커밋이 생기지 않고 branch가 이동하게 됨 최신 커밋으로 이동 3 way merge 두 갈래로 갈라지기 전 공통 조상이 되는 커밋 한 브랜치가 가리키는 커밋 다른 브랜치가 가리키는 커밋위의 3가지 커밋 기준으로 merge 커밋을 자동으로 만듦 base 내용과 비교했을 때 달라진 부분이 우선시 2개의 branch에서 변화가 일어나서 merge를 하지 못 할 경우 conflict 발생"
      } ,
  
    {
      "title"    : "HEAD와 branch",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/head-branch",
      "date"     : "2022-01-08 00:00:00 +0000",
      "content"  : "head 커밋을 가리키는 것이 아닌 branch를 가리킴 master branch를 통해 간접적으로 커밋을 가리킴 만약 b branch로 가게 되면 head가 master에서 b branch를 가리킴branch branch도 head처럼 커밋을 가리키는 존재 커밋은 이전 커밋에 대한 정보를 가지고 있다 git checkout head가 커밋을 직접 가르킬 수 있게 함 branch를 직접 가리킬 수 있게 함 git checkout 브랜치 이름 detached head git checkout a12b를 하게 되면 branch를 통해서 커밋을 가리키는 게 아닌 head가 직접 커밋을 가리킴 과거 커밋에서 새로운 branch를 만들고 싶을 때 사용"
      } ,
  
    {
      "title"    : "Remote Repository",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/remote-repository",
      "date"     : "2022-01-07 00:00:00 +0000",
      "content"  : "origin git remote add origin https github com lmj00 lmj00 github io 위의 retmote repository를 origin 이라는 이름으로 등록하겠다 remote repository를 최초로 추가할 때 origin의 이름으로 가리키는 것이 git 관례push git push u origin master local respository에 있는 master 브랜치의 내용을 origin이라는 remote repository로 보내겠다 master 브랜치가 없으면 생성 후 push u는 set upstream의 약자 u 옵션을 주면 local repository에 있는 브랜치가 origin에 있는 master 브랜치를 추적"
      } ,
  
    {
      "title"    : "Branch merge, conflict",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/branch-merge-conflict",
      "date"     : "2022-01-03 00:00:00 +0000",
      "content"  : "mergea branch에서 b branch를 merge하면b branch에서 했던 커밋들을 가져올 수 있다 git merge masterconflict merge를 하다가 충돌이 발생 git이 어느 것을 반영해야 할 지 결정할 수 없을 때 발생merge 취소 git merge abortabort 취소하다 중단하다conflict가 없어지고 merge를 하기 전으로 돌아감여러 파일에서의 conflict 파일 하나씩 conflict를 해결하면서 git status로 확인 후 git add"
      } ,
  
    {
      "title"    : "Tag",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/tag",
      "date"     : "2022-01-02 00:00:00 +0000",
      "content"  : "tag 버전의 시작점이 되는 커밋에 사용tag 붙이기 git tag 태그 이름 커밋 해시 tag 조회 git tagtag와 연결된 커밋 조회 git show 태그 이름 tag 삭제 git tag d 태그 해시"
      } ,
  
    {
      "title"    : "Reset",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/reset",
      "date"     : "2022-01-02 00:00:00 +0000",
      "content"  : "reset soft git reset soft 5a2b 커밋 해시 커밋 해시의 repository만 바뀜 mixed git reset mixed 1b56 커밋 해시의 staging area repoistory로 바뀜 hard git reset hard 5532 working directory staging area repository가 커밋 해시의 모습으로 바뀜 복구가 불가능 하기 때문에 soft mixed를 위주로 쓴다 head 기준 reset git reset hard head head가 가르키고 있는 커밋의 이전 커밋 git reset hard head 2head가 가리키는 커밋보다 2단계 전 커밋head 예전 커밋으로 돌아가더라도 이후의 커밋들이 삭제되는 게 아니다 이전 커밋이 아닌 이후의 커밋으로도 reset할 수 있다"
      } ,
  
    {
      "title"    : "HEAD",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/head",
      "date"     : "2022-01-02 00:00:00 +0000",
      "content"  : "head 커밋 하나를 가리키고 있는 존재 보통 가장 최근에 한 커밋 가리키는 커밋에 맞춰 working directory 내부 구성"
      } ,
  
    {
      "title"    : "Branch",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/branch",
      "date"     : "2022-01-02 00:00:00 +0000",
      "content"  : "branch 코드 관리 루트 커밋을 시작으로 계속되는 수정의 흐름 작업의 흐름을 분리on branch master master라는 브랜치 위에 있다 repository를 만들고 커밋을 하면 기본으로 세팅되는 브랜치브랜치 만들기 git branch 이름 브랜치 이동 git checkout 이름 현재 브랜치 확인 git branch브랜치 삭제 git branch d 이름 브랜치 만들고 바로 이동 git checkout b 이름"
      } ,
  
    {
      "title"    : "두 커밋간의 차이 확인",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/diff",
      "date"     : "2022-01-01 00:00:00 +0000",
      "content"  : "git diffgit diff 이전의 커밋 아이디 이후의 커밋 아이디"
      } ,
  
    {
      "title"    : "커밋 가이드 라인",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/commit-guidelines",
      "date"     : "2021-12-31 00:00:00 +0000",
      "content"  : "커밋 메시지 커밋 메시지의 제목과 설명 사이에는 한 줄을 비워야 한다 제목 뒤에 온점을 붙이지 않는다 제목의 첫 번째 알파벳은 대문자 제목은 명령조 상세 내용에는 커밋 이유 발생 문제 결과 타인이 바로 이해할 수 있도록 친절하게 작성커밋 하나의 커밋에는 하나의 문제를 해결한 내용과 수정사항을 적어야추후에 이해하기 쉽다 에러가 발생하지 않을 때만 커밋커밋 컨벤션type feat 새로운 기능 fix 버그 수정 docs 문서 변경 style 코드 포맷팅 세미 콜론 누락 코드 수정 없음 refactor 프로덕션 코드 리팩토링 test 테스트 추가subject 명령조를 사용하여 커밋이 하는 일을 설명 제목은 50자 이하 대문자로 시작body 무엇을 왜 커밋했는지 설명 각 줄의 길이는 72자 이내로 제한footer 선택사항"
      } ,
  
    {
      "title"    : "관계형 모델(1:N)",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/one-to-many-relationship",
      "date"     : "2021-09-03 00:00:00 +0000",
      "content"  : "1 n name models foreginkey model 참조하는 오브젝트가 삭제되었을 때 처리 방법 fk name models foreginkey model on delete models option cascade 계단식 삭제 참조하는 객체도 삭제protect protectederror를 발생시켜 객체 삭제 방지set null foreignkey를 null로 설정 null true일 경우만 사용 가능set default foreignkey를 default로 설정set foreignkey에 전달된 값으로 설정하거나 함수 호출do nothing 아무런 행동도 하지 않음object filter model objects filter fk name 필드명 1"
      } ,
  
    {
      "title"    : "Media Field",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Media-File",
      "date"     : "2021-08-31 00:00:00 +0000",
      "content"  : "미디어 파일 url settings에 가서 media url 폴더 명 django가 인식할 수 있게 media root os path join base dir media 미디어 파일 요청이 들어왔을 때 돌려주기 위해 urls py from django conf import settingsfrom django conf urls static import staticurlpatterns static settings media url document root settings media root"
      } ,
  
    {
      "title"    : "ImageField",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/ImageField",
      "date"     : "2021-08-31 00:00:00 +0000",
      "content"  : "폼에 업로드 된 이미지를 media root로 넣어줌 사용하려면 pillow라는 이미지 라이브러리 패키지 설치 만약 같은 이름의 파일이 이미 있다면 뒤에 랜덤한 값을 추가해서 이름이 중복되지 않게 업로드함 pip install pillow image1 models imagefield upload to 업로드 경로"
      } ,
  
    {
      "title"    : "field",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Field",
      "date"     : "2021-08-31 00:00:00 +0000",
      "content"  : "필드에 url name models urlfield 선택지 중 하나 정하기 name choices a a b b name models integerfield choices name choices 튜플 안에 첫 번째 값은 모델 필드에 들어가는 값 두 번째 값은 화면에 보이는 값문자열 기반 필드 빈 값 허용blank true문자열 기반이 아닌 필드를 옵서녈 필드blank true null trueunique를 사용할 경우unique true null true blank true django는 문자열 기반 필드에 값이 없으면 를 저장하기 때문에 null true를 해주지 않아도 됨 문자열 기반이 아닌 필드 integerfield datetimefield"
      } ,
  
    {
      "title"    : "[삽질] Django 회원가입",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/signup-shovelting",
      "date"     : "2021-08-30 00:00:00 +0000",
      "content"  : "allauth에 제공하는 기본 폼으로 했을 땐 가입이 잘 됐는데 signup html을 새로 만들고 회원가입 폼을 입력 후 가입하기를 누르면 아무런 반응이 없었다 이것 저것 만져보다가 settings py에 account username required false를 account username username false으로 잘못적은 것을 확인했다 default 값은 true라서 유저 네임을 입력을 받는 상태였는데 여전히 true로 되어 있어서 폼에서 넘어가지 않았던 것 같다"
      } ,
  
    {
      "title"    : "non-field error",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/non-field-error",
      "date"     : "2021-08-25 00:00:00 +0000",
      "content"  : "폼 전체에 대한 오류 접근 for error in form non fields errors lt div class gt error lt div gt endfor"
      } ,
  
    {
      "title"    : "메시지, 이메일 오버라이딩",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/message-email-overriding",
      "date"     : "2021-08-25 00:00:00 +0000",
      "content"  : "app name은 allauth 보다 위에 있어야 한다 allauth는 로그인 로그아웃 비밀번호 재설정 등 액션이 있을 때 마다 메세지가 생성되는데 사용하지 않을 경우 메세지가 계속 쌓이게 된다 메세지 비활성화를 하는 방법은 메세지 템플릿을 빈 템플릿으로 오버라이딩하면 된다 templates account messages 에 빈 템플릿으로 넣는다 allauth가 발송한 이메일 내용도 같은 방법으로 바꾸면 된다 templates account email 에 빈 템플릿으로 넣는다 django template language는 모든 텍스트 기반 폼에서 사용 가능 allauth가 발송하는 이메일 제목은 오버라이딩을 해도 도메인이 앞에 붙기 때문에 settings에 가서 account email subject prefix"
      } ,
  
    {
      "title"    : "widget-tweaks",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/widget-tweaks",
      "date"     : "2021-08-24 00:00:00 +0000",
      "content"  : "input 태그에 속성 추가 pip install django widget tweaks installed apps에 widget tweaks 템플릿으로 가서 load widget tweaks 추가 form name add class class name attr placeholder error class 추가하기 form name add error class error 에러 메세지 for error in form name errors lt div class gt error lt div gt endfor"
      } ,
  
    {
      "title"    : "비밀번호 관리",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/password-manage",
      "date"     : "2021-08-21 00:00:00 +0000",
      "content"  : "timeoutpassword reset timeout days 기간 기본 값은 3일웹 사이트에서 비밀번호 변경 url account change password 비밀번호 변경 후 redirect viewfrom allauth account views import passwordchangeviewfrom django urls import reverseclass custompasswordchangeview passwordchangeview def get success url self return reverse index urlsfrom 앱 이름 views import custompasswordchangeviewpath password change custompasswordchangeview as view name account password change"
      } ,
  
    {
      "title"    : "이메일 인증",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/certify-email",
      "date"     : "2021-08-21 00:00:00 +0000",
      "content"  : "이메일 인증account email varification 세 가지 옵션 mandatory 이메일 인증을 완료할 때 까지 로그인을 할 수 없다 optional 기본 값 회원가입 시 인증 요청이 발송되지만 인증을 하지 않아도 로그인 가능 none 이메일 인증이 필요 없고 인증 요청 발송이 되지 않는다 링크를 클릭하면 인증완료account confirm email on get trueurlsfrom django views generic import templateviewpath email confirmation done templateview as view template name 앱 이름 email confirmation done html name account email confirmation done 제네릭 뷰에서 템플릿 뷰를 사용하면 된다 템플릿 뷰의 장점은 뷰를 정의하지 않고 사용 가능 하다 로그인이 되어 있을 때account email confirmation authenticated redirect url 경로 로그인이 안 되어 있을 때account email confirmation anonymous redirect url 경로"
      } ,
  
    {
      "title"    : "signup validation",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/signup-validation",
      "date"     : "2021-08-20 00:00:00 +0000",
      "content"  : "유효성 검사 언어language code ko 오류 메세지class user abstractuser nickname models charfield max length 15 unique true null true validators 사용할 validators error messages unique 이미 사용중인 닉네임입니다 작성한 validator 추가auth password validators name 앱 이름 validators validator class 이름 폼에 오류가 있어도 입력했던 비밀번호를 폼에 다시 채워줌account password input render value true"
      } ,
  
    {
      "title"    : "session",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/session",
      "date"     : "2021-08-19 00:00:00 +0000",
      "content"  : "쿠키 지속 시간session cookie age 초 default 값은 2주 단위는 초만료된 세션 지우기python manage py clearsessions브라우저를 닫아도 유저 기억하기account session remember true"
      } ,
  
    {
      "title"    : "nickname",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/nickname",
      "date"     : "2021-08-19 00:00:00 +0000",
      "content"  : "model 정의class user abstractuser nickname models charfield max length 20 unique true null true adminuseradmin fieldsets custom fields fields nickname user 모델의 추가 필드는 어드민 페이지에 나타나지 않기 때문에 추가formfrom django import formsfrom models userclass signupform forms modelform class meta model user fields nickname def signup self request user user nickname self cleaned deta nickname 작성된 폼의 데이터를 가져옴 user save settingsaccount signup form class 앱 이름 forms 폼 클래스"
      } ,
  
    {
      "title"    : "이메일 로그인",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/email-login",
      "date"     : "2021-08-18 00:00:00 +0000",
      "content"  : "이메일로 로그인account authentication method email user name과 email을 둘 다 허용 하려면 username email 이메일을 필수 항목으로 회원가입 로그인account email required trueaccount username username false이메일로 설정 시 model에 username은 앞 부분이 username으로 사용 되고 중복된 닉네임이면 랜덤함수를 뒤에 추가한다 model의 user인스턴스def str self return self emaildefault는 username이기에 이메일로 바꿔줘야함"
      } ,
  
    {
      "title"    : "allauth user access",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/allauth-user-access",
      "date"     : "2021-08-18 00:00:00 +0000",
      "content"  : "allauth redirectionaccount signup redirect url index login redirect url index account logout on get true 바로 로그아웃 user 접근 view에서는 request user template에서는로그인 유무request user is authenticated bool 반환 allauth url name 참조가장 쉬운 방법은 urls py를 보면 된다"
      } ,
  
    {
      "title"    : "allauth setup",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/allauth-setup",
      "date"     : "2021-08-17 00:00:00 +0000",
      "content"  : "setup설치 가이드 django allauth installation pip install django allauth settings py에 authentication backends 추가 settings py에 installed apps 추가 소셜 로그인 부분도 필요하면 추가하면 된다 settings py에 site id 추가 django contrib sites는 장고 프로젝트 하나로 여러 웹 사이트를 운영할 수 있다 따라서 site id는 사이트 마다의 데이터베이스 id를 뜻한다 urls py에 패턴 추가 path에 경로를 공백 으로 하면 login singup와 같은 경로email settings allauth가 제공하는 이메일 인증 비밀번호 찾기 활용 email backend django core mail backends console emailbackend 현재는 터미널 콘솔로 설정"
      } ,
  
    {
      "title"    : "User",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/User",
      "date"     : "2021-08-17 00:00:00 +0000",
      "content"  : "django contrib auth user 기본 유저 모델 abstarctuser 상속 받아서 사용 abstractbaseuser 모든 필드를 직접 정의 user 모델은 한 번 정의하면 다른 모델로 바꾸기 어렵기 때문에 django에서 권장하지 않음abstractuserfrom django contrib auth models import abstractuserclass user abstarctuser settings py에 가서 아래 부분에 auth user model 앱 이름 user"
      } ,
  
    {
      "title"    : "User Admin",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/User-Admin",
      "date"     : "2021-08-17 00:00:00 +0000",
      "content"  : "admin 등록from django contrib import admin from django contrib auth admin import useradminfrom models import user admin site resigster user useradmin useradmin은 user모델에 대해 인터페이스 제공"
      } ,
  
    {
      "title"    : "view",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/View-in-detail",
      "date"     : "2021-08-13 00:00:00 +0000",
      "content"  : "model 데이터 listview object list 모델명 list detailview object 모델명 createview updateview object 모델명 deleteview object 모델명 context object name을 정해주지 않으면 모델명 모델명 list 값으로 전달한다listview template name의 기본 값은 모델을 따라간다 lt br gt listview의 템플릿은 모델명 list인데 모델명을 기준으로템플릿 형식 모델명 list html 을 만들면 적어주지 않아도 된다 context object name을 적지 않아도 django가 object list와 모델명을 보고 유추 후 전달 page kwrag도 쿼리스트링을 통해 인식detailview template name도 위와 동일 pk url kwarg는 기본 값이 pk다 path에서도 기본 값을 쓰기 위해 pk로 받아야 함 이렇게 되면 pk url kwarg를 적어주지 않아도 된다 context object name도 위와 동일createview template name 위와 동일 get success url에 있는 id도 pk 로 변경 path도 pk로 수정updateview template name 위와 동일 pk url kwarg 위와 동일 get success url 위와 동일deleteview context object 위와 동일redirectview pythonclass indexredirectview redirectview pattern name page list 상황에 따라 함수형 뷰 제네릭을 선택"
      } ,
  
    {
      "title"    : "DetailView",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/DetailView",
      "date"     : "2021-08-13 00:00:00 +0000",
      "content"  : "viewsfrom django views generic import detailviewclass practicedetailview listview model 사용할 모델 template name 사용할 템플릿 pk url kwarg page id urls에서 받은 id context object name diary"
      } ,
  
    {
      "title"    : "ListView",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/ListView",
      "date"     : "2021-08-12 00:00:00 +0000",
      "content"  : "viewsfrom django views generic import listviewclass practicelistview listview model 사용할 모델 template name diary page list html context object name diary ordering dt created paginate by 6 page kwarg page 현재 페이지를 쿼리스트링의 변수 값으로 조회template if page obj diary end if 페이지네이션을 적용해서 페이지를 page obj로 전달함django는 쿼리스트링에서 page kwarg에 해당 되는 변수를 찾아서페이지로 처리함 page 이라고 되어있는 부분을 page obj라고 바꿔야 함"
      } ,
  
    {
      "title"    : "CreateView",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/CreateView",
      "date"     : "2021-08-12 00:00:00 +0000",
      "content"  : "from django views generic import createview from django urls import reverseclass practicecreateview createview createview 상속 model 사용할 모델 form class 사용할 폼 template name diary page form html def get success url self return reverse page detail kwargs page id self object id 변수에 값을 할당하면 제네릭 내부적으로 알게 됨context를 적어주지 않아도 키워드 form으로 템플릿에 전달 url 네임 page detail 으로 거슬러 올라가서 url을 찾는다 kwargs는 keyword argument의 약자 사전형으로 키워드를 이용해서 값을 전달할 때 사용하는 인자 self object는 생성된 post 데이터 객체에 접근"
      } ,
  
    {
      "title"    : "Generic Views",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Generic-Views",
      "date"     : "2021-08-11 00:00:00 +0000",
      "content"  : "제네릭 뷰 웹 개발을 할 때 자주 사용하는 구조를 하나의 내용으로 모아놓은 뷰 간단하고 빠르게 뷰를 구현할 수 있다 종류base views view 기본 뷰 templateview url에 포함된 context를 사용하여 템플릿을 렌더링 redirectview 지정된 url로 redirect generic display views detailview 객체의 세부 정보를 나타냄 listview 객체 목록 generic editing views formview 폼을 표시하는 뷰 createview 객체를 생성하는 폼 updateview 객체를 수정하는 폼 deleteview 기존 객체를 삭제하는 폼 generic date views archiveindexview yeararchiveview montharchiveview weekarchiveview dayarchiveview todayarchiveview datedetailview"
      } ,
  
    {
      "title"    : "Class-Based Views",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Class-Based-Views",
      "date"     : "2021-08-11 00:00:00 +0000",
      "content"  : "클래스형 뷰 django는 상속 및 mixins를 활용하여 코드를 재사용할 수 있다 crud에 해당하는 클래스 뷰를 제공한다 class practicecreateview view def get self request def post self request 파이썬 클래스 네이밍은 파스칼 표기법을 사용urls에 해당하는 path를 views practicecreateview as view 형식으로 써야 함"
      } ,
  
    {
      "title"    : "Seeding",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/seeding",
      "date"     : "2021-08-10 00:00:00 +0000",
      "content"  : "시딩 향후 개발하려는 데이터로 데이터베이스를 채우거나 테스트 하고자 할 때 사용하는 방법 seed file은 json xml 등의 파일형식으로 사용 유효성 검증은 거치치 않은 데이터seed file 만들기 내용을 채운다 python manage py dumpdata posts indent 2 gt posts data json pyhton manage py loaddata seed file django seed 모델에 정의된 필드를 보고 데이터를 자동으로 생성하는 패키지 pip install django seed setting에 들어가서 installed apps에 django seed python manage py seed posts number 50 데이터 개수"
      } ,
  
    {
      "title"    : "Pagination",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/pagination",
      "date"     : "2021-08-10 00:00:00 +0000",
      "content"  : "pagination 속성 속성 설명 paginator get page number 번호를 받고 해당 페이지를 리턴 음수거나 페이지 수보다 크면 마지막 페이지 반환 paginator count 모든 페이지의 데이터 개수 paginator num pages 총 페이지 수 page has next 다음 페이지가 있으면 true 반환 page has previous 이전 페이지가 있으면 true 반환 page has other pages 이전 또는 다음 페이지가 있으면 true 반환 page next page number 다음 페이지 번호 반환 page previous page number 이전 페이지 번호 반환 pagination viewfrom django core paginator import paginatorfrom models import page model class def page list request pages page object all paginator paginator pages 페이지에 보여질 데이터 수 page number request get get page 쿼리 스트링으로 조회 page object paginator page page number 번호에 해당하는 페이지 return render request html page object page object pagination template if page object has previous lt a href page 1 gt first lt a gt lt a href page page object previous page number gt prev lt a gt end if if page object has next lt a href page page object next page number gt next lt a gt lt a href page page object paginator num pages gt last lt a gt end if"
      } ,
  
    {
      "title"    : "404 Error",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/404Error",
      "date"     : "2021-08-09 00:00:00 +0000",
      "content"  : "get object or 404 데이터를 조회 했을 때 해당 데이터가 없을 경우 404 에러를 발생하는 과정을 함수로 제공from django shortcuts import get object or 404def page detail request page id page get object or 404 post id page id"
      } ,
  
    {
      "title"    : "Validation",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/validator",
      "date"     : "2021-08-06 00:00:00 +0000",
      "content"  : "유효성 검사 입력 데이터의 규격이 맞는지 확인하는 과정 크게 두 가지 방법 field validator fieldform is valid 데이터의 유효성을 검사 후 bool을 반환validator 값을 받아서 validationerror 기준에 충족하지 않으면 에러를 발생시키는 함수 여러 필드에서 사용가능 django에서 제공하는 built in validator를 사용하거나 직접 validator 구현 가능built in validator django core validators를 import 해서 사용 models charfield validators minlengthvalidator 10 error message 함수를 만든 후 사용 models field validators 함수 form model을 쓰지 않는 일반 form의 경우 사용 validator clean field name 을 사용 def clean title self title self cleaned data title if raise validationerror error message 모든 form class는 cleaned data를 가지고 있는데 이 안에는 form 필드를 정의할 때 넣어준 유효성 검증을 통과한 데이터가 들어 있다"
      } ,
  
    {
      "title"    : "CSRF",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/CSRF",
      "date"     : "2021-08-04 00:00:00 +0000",
      "content"  : "csrf cross site request forgery 사용자가 웹 사이트에서 서버로 요청을 보내는 행위를 공격자가 악의적으로 변경하여 전송위조 방지 토큰 서버로부터 폼을 요청할 때 발행되어 유저가 서버로 데이터를 전송할 때 토큰 값과 함께 전달해서 토큰 값을 비교한 뒤 요청을 처리하는 방식django csrf 방지 lt form gt csrf token lt form gt"
      } ,
  
    {
      "title"    : "pythonanywhere",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/pythonanywhere",
      "date"     : "2021-08-02 00:00:00 +0000",
      "content"  : "bash unzip 폴더 virtualenv python python3 7 가상 환경 이름 cd 가상 환경 이름 source bin activate pip install django 2 2 오른쪽 상단 web 클릭 web 왼쪽에 add를 눌러서 웹 앱 생성 manual configuration python 버전 선택 source code 경로 수정 home 자신의 id 프로젝트명 wsgi 설정19 47 주석 처리 76 89 주석 해제81 path에서 mysite 부분을 프로젝트명 으로 바꿔줌85 프로젝트명 settings 으로 바꿔줌 web으로 이동 후 virtualenv 경로 수정 home 자신의 id 가상 환경 이름 static 경로 설정url은 static directory는 home minjin costaruant static reload 후 접속"
      } ,
  
    {
      "title"    : "배포 준비",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Distribute_ready",
      "date"     : "2021-08-02 00:00:00 +0000",
      "content"  : "디버그 모드 끄기 웹 사이트의 민감한 정보가 유출될 가능성이 있음 settings py gt debuf false allowed hosts 해당 사이트가 서비스할 수 있게 함 정적파일 한 곳으로 모으기 배포 사이트에선 한 곳에서 찾기 때문 settings py 맨 아래에 static root os path join base dir static 모든 static 파일 복사 python manage py collectstatic"
      } ,
  
    {
      "title"    : "배포 방법",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Distribute",
      "date"     : "2021-08-02 00:00:00 +0000",
      "content"  : "클라우드 서비스 업체가 서버를 제공하면 네트워크를 통해 사용하는 플랫폼 크게 iaas paas로 나눠짐iaas infrastructure as a service 운영 체제 애플리케이션 미들웨어를 직접 관리 사용자가 많은 부분을 구축하는 방식 아마존 웹 서비스 ec2 aws microsoft azure google cloudpass platform as a service 플랫폼을 직접 구축하고 관리 할 필요가 없다 google app engine aws elastic beanstalk heroku red hat openshift"
      } ,
  
    {
      "title"    : "Admin",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/admin",
      "date"     : "2021-07-28 00:00:00 +0000",
      "content"  : "관리자 계정 생성하기python manage py createsuperuser"
      } ,
  
    {
      "title"    : "QuerySet",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/QuerySet",
      "date"     : "2021-07-28 00:00:00 +0000",
      "content"  : "queryset 전달 받은 model의 객체 목록 데이터베이스로부터 데이터를 읽고 필터를 걸거나 정렬을 할 수 있다"
      } ,
  
    {
      "title"    : "Model (Update, Delete)",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Model(Update,-Delete)",
      "date"     : "2021-07-28 00:00:00 +0000",
      "content"  : "데이터 수정하기data model objects get id 1 data 필드 수정할 내용 data save 데이터 삭제하기data model objects get id 2 data delete 여러 데이터 조회 model objects filter"
      } ,
  
    {
      "title"    : "Model (Read)",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Model(Read)",
      "date"     : "2021-07-27 00:00:00 +0000",
      "content"  : "모든 데이터 조회하기 model objects all 세부 데이터 조회하기 model objects all values 모든 데이터의 특정 값만 보기 model objects all values 필드 오름차순 내림차순 model objects all order by 필드 model objects all order by 필드 내림차순은 필드 앞에 를 붙여 주면 된다 조건 키워드 필드명 조건키워드 조건 하나의 데이터 조회 model objects get 결과가 두 개 이상이면 에러여러 데이터 조회 model objects filter"
      } ,
  
    {
      "title"    : "Model (Create)",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Model(Create)",
      "date"     : "2021-07-27 00:00:00 +0000",
      "content"  : "shell 진입python manage py shellmodel 불러오기from app models import class 데이터베이스에 데이터 저장하기 model objects create 값"
      } ,
  
    {
      "title"    : "Migration",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/migration",
      "date"     : "2021-07-26 00:00:00 +0000",
      "content"  : "migration python manage py makemigrations django의 데이터베이스 변경 사항에 대한 버전 컨트롤 시스템 model을 생성하거나 변경했을 때 migration을 하나씩 만드는 것 models py의 내용을 확인 후 migrations 폴더 안에 py파일로 기록 app 단위로 관리migrate python manage py migrate 만든 migration을 실제 데이터베이스에 적용하는 것 orm이 migration 폴더 안에 있는 py 파일을 확인 후 sql로 변환하여 실행migrations 파일 이름 설정 python manage py makemigrations name 파일 이름 가끔 xxxx auto py와 같이 생성되기 때문에 변경된 흐름을 알 수 있도록 이름을 정해주는 게 좋다 이전 migration으로 되돌리기 python manage py migrate 앱 이름 migration 번호 생성되어 있는 migration 목록 보기 python manage py showmigrations x 로 되어 있는 부분은 이미 django에 반영이 된 것 특정 앱만 보고 싶으면 뒤에 앱 이름 orm을 통해서 변환된 sql 보기 python manage py sqlmigrate 앱 이름 migration 번호"
      } ,
  
    {
      "title"    : "상태코드",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C",
      "date"     : "2021-07-25 00:00:00 +0000",
      "content"  : "status code 상태 코드 요청에 대한 처리 결과의 서버 응답 코드1xx informational 100 continue 요청의 첫 부분을 받아서 다음 요청을 기다리고 있는 것을 알려준다 요청이 이미 완료된 경우 응답을 무시할 수 있다 101 switching protocol 클라이언트가 서버에게 프로토콜 전환을 요청했고 서버에서 프로토콜을 변경한다는 것을 나타냄 102 processing 서버가 요청을 수신하여 처리 중이지만 아직 사용할 수 있는 응답이 없는 상태 103 early hints 서버가 응답을 준비하는 동안 사용자가 리소스를 미리 로딩할 수 있도록 함 2xx success 200 ok 요청이 성공적으로 처리되었다는 것을 의미 201 created 요청이 성공적으로 처리되어 새로운 리소스 생성 202 accepted 요청은 받았지만 아직 처리되지 않음 203 non authoritative information 요청에 포함된 정보가 다른 곳에서 수정된 정보라는 것을 나타냄 204 no content 정상 처리 되었지만 서버에서 보내줄 데이터가 없음 205 reset content 클라이언트가 보낸 문서를 재설정하도록 지시 206 partial content range 헤더가 클라이언트에서 리소스의 일부만 요청하도록 전송될 때 사용 207 multi status 여러 상태 코드가 적절할 수 있는 상황에 대해 여러 리소스에 대한 정보를 전달 208 already reported 동일한 컬렉션에 대한 여러 바인딩의 내부 멤버를 반복적으로 열거하는 것을 피하기 위해 사용 226 http delta encoding 서버는 get 리소스에 대한 요청을 수행했으며 응답은 현재 인스턴스에 적용된 하나 이상의 인스턴스 조작 결과를 나타냄 3xx redirection 300 multiple choice 요청에 대해 서버가 여러 응답이 가능하며 클라이언트가 그 중 하나를 선택해야 함을 의미 301 moved permanently 요청한 리소스가 새로운 위치로 영구 이동했음을 나타냄 클라이언트는 자동적으로 새로운 위치로 전달 302 found 요청한 리소스가 일시적으로 이동했음을 나타냄 향후 해당 리소스를 요청할 때도 동일한 주소로 해야 한다는 것을 알려줌 303 see other 서버가 클라이언트의 get 요청으로 다른 uri에서 요청된 리소스를 가져오도록 지시 304 not modified 요청에 대한 리소스가 변경되지 않았다는 것을 알려주며 서버가 콘텐츠를 전달하지 않는다 클라이언트는 이전에 전달받은 결과를 계속해서 사용할 수 있음 4xx client error 400 bad request 서버가 요청을 이해할 수 없다는 것을 의미 401 unauthorized 클라이언트가 요청된 응답을 얻기 위해서는 추가적인 인증이 필요 403 forbidden 클라이언트는 요청한 콘텐츠에 접근할 권한이 없음을 의미 401과 다른 점은 서버가 클라이언트에 대한 정보를 가지고 있다 404 not found 클라이언트가 요청한 리소스를 서버가 찾을 수 없음 405 method not allowed 요청 방법은 서버에서 알고 있지만 리소스에서 지원하지 않음 406 not acceptable 클라이언트의 요청에 맞는 콘텐츠를 찾지 못할 때 사용 407 proxy authentication required 프록시에서 인증을 수행해야 함 408 request timeout 요청 시간 초과 409 conflict 요청이 서버의 상태와 충돌 410 gone 요청한 콘텐츠가 서버에서 영구적으로 삭제 됨 411 length required content length 헤더 필드 없이 요청하기 때문에 서버에서 요청을 거부 content length 수신자에게 전송 되는 바이트 단위를 가지는 메세지 본문의 크기 412 precondition failed 클라이언트와 서버가 충족하지 않는 조건으로 응답 거부 413 payload too large 요청된 엔티티가 서버에서 정의한 범위보다 크다 414 uri too long 요청한 uri는 서버가 해석할 수 있는 것보다 길다 415 unsupported media type 요청한 데이터의 미디어 형식이 서버에서 지원되지 않아 서버가 거부 416 range not satisfiable 요청 헤더 필드의 범위가 잘못됨 417 expectation failed range 헤더 필드에 요청한 범위를 서버에서 충족할 수 없음을 의미 418 i m a teapot 서버가 찻 주전자로 커피를 내리려는 시도를 거부 gt 알맞은 체계 를 사용해라 421 misdirected request 서버로 유도된 요청은 응답을 생성할 수 없음 422 unprocessable entity 요청은 정상이지만 문법 오류로 인하여 따를 수 없음 423 locked 리소스 접근이 잠겨있음 424 failed dependency 이전 요청이 실패했기 때문에 지금의 요청도 실패 426 upgrade required 서버는 지금의 프로토콜을 사용하여 요청을 처리하는 것을 거절했지만 클라이언트가 다른 프로토콜로 업그레이드를 하면 처리를 할 수도 있다 428 precondition required 서버는 요청이 조건적이어야 함 서버의 상태를 수정하여 발생하는 업데이트 상실 을 예방하기 위한 목적 429 too many requests 클라이언트가 지정된 시간에 너무 많은 요청을 보냄 431 request header fields too large 요청한 헤더 필드가 너무 크기 때문에 서버는 요청을 처리하지 않음 5xx server error 500 internal server error 서버에서 오류가 발생하여 요청한 작업을 수행할 수 없음 501 not implemented 요청된 방법은 서버에서 수행할 수 없음 502 bad gateway 서버가 요청을 처리하는데 필요한 작업 중 게이트웨이로부터 잘못된 응답을 받음 503 service unavailable 서버가 요청을 처리할 준비가 되지 않음 일반적인 원인은 유지보수를 위해 작동이 중단되거나 과부하가 걸린 것 504 gateway timeout 서버가 게이트웨이 역할을 하고 있으며 응답을 받을 수 없을 때 발생 505 http version not supported 요청에 사용된 http 버전은 서버에서 지원되지 않음 506 variant also negotiates 서버에 내부 구성 오류가 있다 요청을 위한 투명한 컨텐츠 협상이 순환 참조로 이어진다 507 insufficient storage 서버에 내부 구성 오류가 있다 선택한 가변 리소스는 투명한 콘텐츠 협상에 참여하도록 구성되므로 협상 프로세스의 적절한 종료 지점이 아니다 508 loop detected 서버가 요청을 처리하는 동안 무한 루프를 감지 510 not extended 서버가 요청을 이행하려면 요청에 대한 추가 확장이 필요 511 network authentication required 클라이언트가 네트워크 액세스를 얻기 위해 인증을 받아야 할 필요가 있음을 나타냄"
      } ,
  
    {
      "title"    : "앱 구조",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/%EC%95%B1-%EA%B5%AC%EC%A1%B0",
      "date"     : "2021-06-26 00:00:00 +0000",
      "content"  : "admin py 각각의 앱을 관리자 기능과 연결하거나 관리자 기능에 대해 설정하는 파일apps py 각각의 앱마다 추가적인 기능 및 설정을 넣어 주기 위한 파일migrations 디렉토리 django 앱의 데이터 구조에 대한 변경 사항인 migration 파일이 저장되는 디렉토리models py 앱에서 사용하는 데이터 구조를 정의하고 데이터베이스와의 소통을 담당하는 파일tests py 앱에 대한 테스트 코드를 작성하는 파일views py 앱에서 어떤 기능을 할지에 대한 메인 로직을 담당하는 파일"
      } ,
  
    {
      "title"    : "프로젝트 구조",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/Django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0",
      "date"     : "2021-06-26 00:00:00 +0000",
      "content"  : "프로젝트 구조manage py 프로젝트 관리를 위한 명령 유틸리티 django admin의 기능을 포함하면서 몇 가지 설정 기능이 더 있는 것 프로젝트를 생성할 땐 django admin을 사용하고 나머지 기능은 manage py 사용init py python 패키지로 인식하게끔 사용 3 3 이후부터는 없어도 인식이 되지만 하위 버전 호환을 위해 작성settings py 프로젝트의 여러 가지 설정을 담고 있는 파일urls py 프로젝트로 들어온 url을 보고 알맞은 view로 연결wsgi py webserver gateway interface의 약자로 파이썬에서 웹 통신을 하기 위한 약속"
      } ,
  
    {
      "title"    : "앱 생성",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/%EC%95%B1-%EC%83%9D%EC%84%B1",
      "date"     : "2021-06-24 00:00:00 +0000",
      "content"  : "manage py를 이용해서 app 생성python manage py startapp 앱 이름"
      } ,
  
    {
      "title"    : "프로젝트 생성",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/run-project",
      "date"     : "2021-05-04 00:00:00 +0000",
      "content"  : "프로젝트 생성django admin startproject 프로젝트 이름 개발 서버 실행python manage py runserver python manage py runserver ip port 로 이루어져 있다 기본 값은 127 0 0 1 8000"
      } ,
  
    {
      "title"    : "개발 환경 구성",
      "category" : "",
      "tags"     : "",
      "url"      : "/django/environments",
      "date"     : "2021-05-02 00:00:00 +0000",
      "content"  : "pyenv로 설치할 수 있는 버전 보기pyenv install listpyenv로 python 설치pyenv install 3 8 2가상 환경 생성pyenv virtualenv 파이썬 버전 가상 환경 이름 가상 환경 삭제pyenv uninstsall 가상 환경 이름 버전 확인pyenv versions가상 환경 적용pyenv global 가상 환경 이름 pyenv local 가상 환경 이름 설치되어있는 패키지 목록 확인pip listdjango 설치pip3 install django 버전 사용할 환경에 django를 설치해야 함설치 확인django amdin versionwsl 폰트 d2coding 검색 gt 글꼴 설정 wsl 우 클릭으로 속성 들어가서 지정 wsl에 윈도우 파일 넣기explorer exe zsh shellsudo apt get install zshchsh s which zsh echo shelloh my zshsh c curl fssl https raw github com robbyrussell oh my zsh master tools install sh pyenv 설정export pyenv root home pyenv export path pyenv root bin path eval pyenv init path eval pyenv virtualenv init 기존의 pyenv 설정은 bash shell에 설정한 것이므로 zsh shell인 zshrc에도 설정 pyenv versions으로 설정이 됐는지 확인zsh syntax highlightinggit clone https github com zsh users zsh syntax highlighting gitecho source q pwd zsh syntax highlighting zsh syntax highlighting zsh gt gt zdotdir home zshrczsh autosuggestionsgit clone https github com zsh users zsh autosuggestions zsh custom oh my zsh custom plugins zsh autosuggestionscode 로 zshrc를 열어서 plugins git 옆에 한 칸 띄우고 추가plugins git zsh autosuggestions"
      } ,
  
    {
      "title"    : "데이터사이언스",
      "category" : "",
      "tags"     : "",
      "url"      : "/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A4",
      "date"     : "2020-12-29 00:00:00 +0000",
      "content"  : "numpy numerical 숫자와 관련된 python 계산 작업을 쉽게 도와주는 도구 numpy 배열 혹은 numpy array라는 자료형을 제공 여러 값 들을 효율적으로 다룰 수 있음 행렬 2차원 배열에서 유용numpy arraynumpy 모듈의 array 메소드에 파라미터로 파이썬 리스트를 넘겨주면 numpy array 리턴array1 numpy random random 6 print type array1 lt class numpy ndarray gt 모든 값이 1인 numpy array 생성array1 numpy full 6 1 array2 numpy ones 6 dtype int print array1 print print array2 1 1 1 1 1 1 1 1 1 1 1 1 arange함수는 파이썬의 range와 비슷한 원리로 동작array1 numpy arange 6 print array1 0 1 2 3 4 5 numpy 연산import numpy as nparr np arange 1 11 arr2 np arange 10 20 print arr arr2 11 13 15 17 19 21 23 25 27 29 where 해당 조건에 맞는 인덱스를 출력array1 np arange 1 10 np where array1 gt 4 array 4 5 6 7 8 dtype int64 filter 해당되는 인덱스의 값만 필터링array1 np arange 1 20 3 filter np where array1 gt 4 array1 filter array 7 10 13 16 19 pandas numpy를 이용해서 만듦 외부 데이터 읽고 쓰기 정리된 데이터를 새로운 파일에 저장하는 기능 데이터를 시각화 표 형식 데이터 다루는데 능함dataframe 만드는 방법import numpy as npimport pandas as pdtwo dimensional list lee 170 60 kim 175 75 choi 180 85 two dimensional array np array two dimensional list list of series pd series lee 170 60 pd series kim 175 75 pd series choi 180 85 df1 pd dataframe two dimensional list df2 pd dataframe two dimensional array df3 pd dataframe list of series print df1 위의 셋은 모두 동일하다 0 1 20 lee 170 601 kim 175 752 choi 180 85read csv csv comma separated values 값들이 쉼표로 나눠짐 read csv 함수는 dataframe을 리턴 csv 파일의 첫 번째 줄이 헤더로 들어감 헤더가 없는 경우 파라미터 header에 none을 넘겨줘야 함pd read csv abcd csv header none 특정 colmun을 row로 이름으로 지정 가능pd read csv abcd csv index col 0 dataframe df 는 컬럼에 대한 연산 df loc 는 df loc row col 추출 df loc 파라미터가 하나면 row 추출"
      } ,
  
    {
      "title"    : "Spring",
      "category" : "",
      "tags"     : "",
      "url"      : "/Spring",
      "date"     : "2020-09-08 00:00:00 +0000",
      "content"  : "정적컨텐츠 서버에서 웹 브라우저에 파일을 그대로 내려줌 1 웹 브라우저에서 localhost hello static html을 접속한다 2 내장 톰캣 서버가 요청을 받음3 스프링으로 넘기기전에 hello static와 관련된 컨트롤러가 있는지 확인한다 4 있으면 hello static html을 웹 브라우저로 반환한다 h2 db h2 bigint java long 타입 generated by default as identitiy 값을 세팅 하지 않고 insert하면 db가 들어왔을 때 자동으로 id 값을 채워준다"
      } ,
  
    {
      "title"    : "git",
      "category" : "",
      "tags"     : "",
      "url"      : "/git/git",
      "date"     : "2020-09-05 00:00:00 +0000",
      "content"  : "최근 커밋 수정 git commit amendalias git config alias history log pretty oneline reset soft git reset soft 5a2b 커밋 해시 커밋 해시의 repository만 바뀜 mixed git reset mixed 1b56 커밋 해시의 staging area repoistory로 바뀜 hard git reset hard 5532 working directory staging area repository가 커밋 해시의 모습으로 바뀜 복구가 불가능 하기 때문에 soft mixed를 위주로 쓴다"
      } 
  
]